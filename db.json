{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-auto/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/images/banner_color.jpg","path":"css/images/banner_color.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/images/banner_forest.jpg","path":"css/images/banner_forest.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/images/banner_market.jpg","path":"css/images/banner_market.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/images/banner_sky.jpg","path":"css/images/banner_sky.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-auto/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1688371775070},{"_id":"source/_posts/ubuntu部署单节点Kubernetes1.27.md","hash":"a9e24c6921eef6ff024f01bb04d838aed6379c1f","modified":1688376146766},{"_id":"source/_posts/GMP.md","hash":"1fb3a6b4655871ae115ec1b994543381e898cd2c","modified":1688376913314},{"_id":"source/categories/index.md","hash":"e1ac0ef3b26e7b6608dd394f8e4a3bbe94857b95","modified":1688378658586},{"_id":"source/_posts/SkyWalking安装部署与集成.md","hash":"22ca72b27eb10fb9a956a3bbb471642855f2185a","modified":1688376128106},{"_id":"source/tags/index.md","hash":"0c970df37fa38deb2d9c7a331507a2b4e0a66db1","modified":1688378638357},{"_id":"themes/hexo-theme-auto/LICENSE","hash":"aea35a71d93e4efeaa940b429e356d0afa4ea1f1","modified":1688372522243},{"_id":"themes/hexo-theme-auto/README.md","hash":"38912efff9e027ddd2c0b17f2e4e14e82f62f750","modified":1688372522244},{"_id":"themes/hexo-theme-auto/_config.yml","hash":"e13fdc5b400a53f60dc451e4668d8a39823c6642","modified":1688451890119},{"_id":"themes/hexo-theme-auto/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1688372522245},{"_id":"themes/hexo-theme-auto/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1688372522244},{"_id":"themes/hexo-theme-auto/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1688372522245},{"_id":"themes/hexo-theme-auto/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1688372522245},{"_id":"themes/hexo-theme-auto/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1688372522245},{"_id":"themes/hexo-theme-auto/languages/zh-CN.yml","hash":"ea4cc533e9739753e6bbbd001ebf648b491d441f","modified":1688372522245},{"_id":"themes/hexo-theme-auto/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1688372522244},{"_id":"themes/hexo-theme-auto/layout/categories.ejs","hash":"3d367064d63e23a5d3d82529990cca9c5b87eb97","modified":1688372522247},{"_id":"themes/hexo-theme-auto/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1688372522247},{"_id":"themes/hexo-theme-auto/layout/category.ejs","hash":"a42381a1635bfeb829a97eafb0e2dd3891eb971b","modified":1688372522248},{"_id":"themes/hexo-theme-auto/layout/.DS_Store","hash":"9b3d41e67c7dc45c122948d61996717b25e2808e","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1688372522248},{"_id":"themes/hexo-theme-auto/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1688372522248},{"_id":"themes/hexo-theme-auto/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1688372522248},{"_id":"themes/hexo-theme-auto/layout/tags.ejs","hash":"51c3f4e7ba115126fbed62e85c18daa7c8fc7211","modified":1688372522248},{"_id":"themes/hexo-theme-auto/layout/_partial/after-footer.ejs","hash":"3b8a176da2e3e95ddaef806d02a2bcff5bf1d37c","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/layout.ejs","hash":"9ee09fc4beefa6efb7f0c5f7f2fef7d933e1198e","modified":1688372522248},{"_id":"themes/hexo-theme-auto/layout/_partial/archive.ejs","hash":"a34cd4edd973ae4e995800c1b9ab75b8949e529f","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/_partial/head.ejs","hash":"bbeb5b212f32d3274037ebe917684c21ea699df8","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/_partial/header.ejs","hash":"73cf87380d3dfb9bece94cf2fccb75ed1dd94a37","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/_partial/footer.ejs","hash":"43af0e20d59116843767f24d6646fca5aee0ed88","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1688372522248},{"_id":"themes/hexo-theme-auto/layout/_widget/archive.ejs","hash":"46dffe72b640d0187907953598ef7816e37330d5","modified":1688372522247},{"_id":"themes/hexo-theme-auto/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1688372522247},{"_id":"themes/hexo-theme-auto/source/css/_variables.styl","hash":"4e1a4ebc8854cfb56d643c308aa6a6f42199a812","modified":1688372522252},{"_id":"themes/hexo-theme-auto/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1688372522246},{"_id":"themes/hexo-theme-auto/source/css/_extend.styl","hash":"e63a8d7de9d9675beaba475aee8a67cc17028982","modified":1688372522251},{"_id":"themes/hexo-theme-auto/source/css/style.styl","hash":"7ca893c62b242eadf4812f424fb3dcc9d738eb5d","modified":1688372522274},{"_id":"themes/hexo-theme-auto/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1688372522247},{"_id":"themes/hexo-theme-auto/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1688372522247},{"_id":"themes/hexo-theme-auto/source/js/script.js","hash":"fa1dd22cfc17353abef4a09e7dc9816e5eda7d5b","modified":1688372522275},{"_id":"themes/hexo-theme-auto/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1688372522247},{"_id":"themes/hexo-theme-auto/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1688372522247},{"_id":"themes/hexo-theme-auto/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1688372522246},{"_id":"themes/hexo-theme-auto/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1688372522247},{"_id":"themes/hexo-theme-auto/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1688372522247},{"_id":"themes/hexo-theme-auto/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1688372522252},{"_id":"themes/hexo-theme-auto/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1688372522251},{"_id":"themes/hexo-theme-auto/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1688372522247},{"_id":"themes/hexo-theme-auto/source/css/_partial/article.styl","hash":"56621bb6e0234140d36c2283c1916901e48b183c","modified":1688372522251},{"_id":"themes/hexo-theme-auto/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1688372522251},{"_id":"themes/hexo-theme-auto/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1688372522252},{"_id":"themes/hexo-theme-auto/source/css/_partial/mobile.styl","hash":"b4f5dbf9e6177da36fe3ebeb4190908bf5973aeb","modified":1688372522251},{"_id":"themes/hexo-theme-auto/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1688372522251},{"_id":"themes/hexo-theme-auto/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1688372522274},{"_id":"themes/hexo-theme-auto/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1688372522247},{"_id":"themes/hexo-theme-auto/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1688372522247},{"_id":"themes/hexo-theme-auto/source/css/_partial/header.styl","hash":"e4ffb6a69816270031600e7792361dc0a28a750c","modified":1688372522251},{"_id":"themes/hexo-theme-auto/source/css/_partial/footer.styl","hash":"e7169d05958e8db4b7260c0fbfddef05355f31b6","modified":1688372522251},{"_id":"themes/hexo-theme-auto/source/css/_partial/sidebar-aside.styl","hash":"aff1414090e4b63c8815e033329d130e4f5548a3","modified":1688372522252},{"_id":"themes/hexo-theme-auto/source/css/_partial/others.styl","hash":"e2e051cebadc7d93516430428fd19ed3df674c65","modified":1688372522251},{"_id":"themes/hexo-theme-auto/source/css/_partial/sidebar.styl","hash":"a9a4f758dec9c1681b6546a0c83281cad3784150","modified":1688372522252},{"_id":"themes/hexo-theme-auto/source/css/_partial/sidebar-bottom.styl","hash":"49097ff20103e59ebb69958c3a4da77629f94f63","modified":1688372522252},{"_id":"themes/hexo-theme-auto/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1688372522275},{"_id":"themes/hexo-theme-auto/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1688372522274},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1688372522262},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1688372522261},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1688372522254},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1688372522261},{"_id":"themes/hexo-theme-auto/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1688372522254},{"_id":"themes/hexo-theme-auto/source/css/images/banner_sky.jpg","hash":"c086890a52d7101593be2fbeee5935b14e9309b3","modified":1688372522274},{"_id":"themes/hexo-theme-auto/Auto.png","hash":"7c4349ec32dd5b2097699424f89bb5dd0d809935","modified":1688372522243},{"_id":"themes/hexo-theme-auto/screenshots/hexo-theme-auto.png","hash":"e75996a3e7e530319faf9c00b912273fcedbe938","modified":1688372522250},{"_id":"themes/hexo-theme-auto/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1688372522259},{"_id":"themes/hexo-theme-auto/source/css/images/banner_color.jpg","hash":"508cfbdbbdc50ca28b1bfcfe04e4d7e0e8767b47","modified":1688372522264},{"_id":"themes/hexo-theme-auto/source/css/images/banner_forest.jpg","hash":"85d368a05038356133239318449b02807c2e3f24","modified":1688372522268},{"_id":"themes/hexo-theme-auto/source/css/images/banner_market.jpg","hash":"a729f0a4a36bc68bb82aee36d002d402f11a1981","modified":1688372522271},{"_id":"public/categories/index.html","hash":"2a18b90a2588af7de1a726f40ee9be2f0dcccc8d","modified":1715326026867},{"_id":"public/hello-world.html","hash":"e33974bc831ca6b137e2634d1e52c78dbc153949","modified":1715326026867},{"_id":"public/tags/index.html","hash":"2eb39c5014f5b95e5eefdb1ccca5766729b0a2af","modified":1715326026867},{"_id":"public/archives/index.html","hash":"e556e6732638966a5e48264baa4b8dae35946f0a","modified":1715326026867},{"_id":"public/archives/2023/index.html","hash":"f36d859a6ea5dd53370ebe223ed2b437d2ca1a5c","modified":1715326026867},{"_id":"public/archives/2023/06/index.html","hash":"175fffa7360ea9b0a2d58d4fb823fb3a5c889fc5","modified":1715326026867},{"_id":"public/archives/2023/07/index.html","hash":"e00f2a5564b4bb9b818b93eb6d9ae495f5630ccb","modified":1715326026867},{"_id":"public/tags/GMP/index.html","hash":"9eb72c65f7bac4c13ac5676e06ea541d3a1f68a1","modified":1715326026867},{"_id":"public/tags/golang/index.html","hash":"1b02dbb64dbe40fe26f23929aacd731ed2a975bd","modified":1715326026867},{"_id":"public/tags/源码/index.html","hash":"5768964d95d65c6f8609420013508850702a7e5c","modified":1715326026867},{"_id":"public/tags/分布式链路追踪/index.html","hash":"598ed6cca94ca57534723662e163db2426712368","modified":1715326026867},{"_id":"public/tags/skywalking/index.html","hash":"4e4b72070e7be4a9079e1103df1a4db301e848c2","modified":1715326026867},{"_id":"public/tags/k8s/index.html","hash":"df03bdb9299c86016147a558ba358b663d05b98d","modified":1715326026867},{"_id":"public/tags/linux/index.html","hash":"343f33f8a81dcf0e61c4b189961b1722075df429","modified":1715326026867},{"_id":"public/2023/07/03/GMP/index.html","hash":"de7c893a6c8dc282289cb6bfc8c367c191a26cf4","modified":1715326026867},{"_id":"public/2023/07/03/SkyWalking安装部署与集成/index.html","hash":"0f6d849ac695389ecd5f9572731e493616750f65","modified":1715326026867},{"_id":"public/2023/06/28/ubuntu部署单节点Kubernetes1.27/index.html","hash":"cdc24f7d78e012b677589918e718a5e909b58886","modified":1715326026867},{"_id":"public/index.html","hash":"41823481923ffe255fe5928c4d2c3dec7988360b","modified":1715326026867},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1688379409702},{"_id":"public/js/script.js","hash":"fa1dd22cfc17353abef4a09e7dc9816e5eda7d5b","modified":1688379409702},{"_id":"public/css/style.css","hash":"bc13baf7e7ecd31790921df5c54772d515a078b5","modified":1688379409702},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1688379409702},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1688379409702},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1688379409702},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1688379409702},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1688379409702},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1688379409702},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1688379409702},{"_id":"public/css/images/banner_sky.jpg","hash":"c086890a52d7101593be2fbeee5935b14e9309b3","modified":1688379409702},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1688379409702},{"_id":"public/css/images/banner_color.jpg","hash":"508cfbdbbdc50ca28b1bfcfe04e4d7e0e8767b47","modified":1688379409702},{"_id":"public/css/images/banner_forest.jpg","hash":"85d368a05038356133239318449b02807c2e3f24","modified":1688379409702},{"_id":"public/css/images/banner_market.jpg","hash":"a729f0a4a36bc68bb82aee36d002d402f11a1981","modified":1688379409702},{"_id":"source/tags/index-1.md","hash":"44448774e6f493d125b5b6478c026dc7361157a8","modified":1688451804945},{"_id":"public/tags/index-1.html","hash":"8cf0d879b269d7958b257cf83df4e5adbcae2aac","modified":1715326026867},{"_id":"themes/hexo-theme-next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1688452056129},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1688452056128},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1688452056128},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1688452056128},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1688452056129},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1688452056129},{"_id":"themes/hexo-theme-next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1688452056129},{"_id":"themes/hexo-theme-next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1688452056139},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1688452056129},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1688452056129},{"_id":"themes/hexo-theme-next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1688452056132},{"_id":"themes/hexo-theme-next/_config.yml","hash":"dbc6f04b375201883b88d287ed7eab76b1c2d856","modified":1688452431699},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1688452056128},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1688452056128},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1688452056128},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1688452056128},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1688452056129},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1688452056129},{"_id":"themes/hexo-theme-next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1688452056129},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1688452056129},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1688452056129},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1688452056130},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1688452056130},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1688452056129},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1688452056130},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1688452056130},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1688452056129},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1688452056130},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1688452056130},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1688452056130},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1688452056132},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1688452056130},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1688452056132},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1688452056130},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1688452056133},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1688452056133},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1688452056133},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1688452056133},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1688452056133},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1688452056133},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1688452056133},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1688452056133},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1688452056133},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1688452056139},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1688452056139},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1688452056139},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1688452056132},{"_id":"themes/hexo-theme-next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1688452056141},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1688452056139},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1688452056139},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1688452056128},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1688452056128},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1688452056139},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1688452056128},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1688452056128},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1688452056131},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1688452056133},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1688452056131},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1688452056132},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1688452056132},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1688452056133},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1688452056132},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1688452056133},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1688452056134},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1688452056139},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1688452056140},{"_id":"themes/hexo-theme-next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1688452056137},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1688452056140},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1688452056136},{"_id":"themes/hexo-theme-next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1688452056140},{"_id":"themes/hexo-theme-next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1688452056136},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1688452056141},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1688452056141},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1688452056149},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1688452056141},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1688452056150},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1688452056141},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1688452056150},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1688452056138},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1688452056151},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1688452056141},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1688452056151},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1688452056151},{"_id":"themes/hexo-theme-next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1688452056150},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1688452056148},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1688452056134},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1688452056135},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1688452056136},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1688452056137},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1688452056138},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1688452056138},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1688452056139},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1688452056138},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1688452056139},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1688452056140},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1688452056138},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1688452056140},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1688452056140},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1688452056137},{"_id":"themes/hexo-theme-next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1688452056140},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1688452056137},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1688452056151},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1688452056153},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1688452056151},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1688452056152},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1688452056142},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1688452056151},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1688452056152},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1688452056142},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1688452056149},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1688452056148},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1688452056142},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1688452056142},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1688452056142},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1688452056142},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1688452056142},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1688452056143},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1688452056144},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1688452056142},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1688452056146},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1688452056147},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1688452056145},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1688452056152},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1688452056152},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1688452081184},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1688452081184},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1688452081184},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1688452081184},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1688452081184},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1688452081184},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1688452081184},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1688452081184},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1688452081184},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1688452081184},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1688452081184},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1688452081184},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1688452081184},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1688452081184},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1688452081184},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1688452081184},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1688452081184},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1688452081184},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1688452081184},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1688452081184},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1688452081184},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1688452081184},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1688452081184},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1688452081184},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1688452081184},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1688452081184},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1688452081184},{"_id":"public/css/main.css","hash":"d6b1b5c94a3d66e51393f4d59617b5a2fa658d8c","modified":1688452081184},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1688452081184},{"_id":"source/.DS_Store","hash":"5a775f21010191fe85f660bad1f5272c78be6831","modified":1691980863790}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2023-07-03T09:27:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-07-03 17:27:55\ntype: categories\n---\n","updated":"2023-07-03T10:04:18.586Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cljmpiaa70000iqc969r222hc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","date":"2023-07-03T09:11:50.703Z","updated":"2023-07-03T08:09:35.070Z","path":"hello-world.html","comments":1,"layout":"page","_id":"cljmpiaa90002iqc91eruhies","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"tags","date":"2023-07-03T09:26:41.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-07-03 17:26:41\ntype: tags\n---\n","updated":"2023-07-03T10:03:58.357Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cljmpiaab0005iqc9hxotb06p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-07-04T06:23:24.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2023-07-04 14:23:24\n---\n","updated":"2023-07-04T06:23:24.945Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"cljnwnd140000ovc91iw241nb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Golang GMP调度器","date":"2023-07-03T09:04:35.000Z","_content":"\n# Golang GMP调度器\n\n### 一、进程与线程\n\n1.**进程**是操作系统进行资源分配和调度的一个独立单位，不同的进程通过进程间通信来通信。**由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大**，但相对比较稳定安全。\n\n2.**线程**是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，**上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据**。\n\n虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1 兆以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间[1](https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:1)，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销[2](https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:2)。\n\n##### **Go 语言的调度器通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。**\n\n### 二、Golang调度器\n\n#### 1.Go 语言的协程 goroutine\n\nGo 为了提供更容易使用的并发方法，使用了 goroutine 和 channel。goroutine 来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被 runtime 调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。\n\nGo 中，协程被称为 goroutine，它非常轻量，一个 goroutine 只占几 KB，并且这几 KB 就足够 goroutine 运行完，这就能在有限的内存空间内支持大量 goroutine，支持了更多的并发。虽然一个 goroutine 的栈只占几 KB，但实际是可伸缩的，如果需要更多内容，runtime 会自动为 goroutine 分配。\n\nGoroutine 特点：\n\n占用内存更小（几 kb）\n调度更灵活 (runtime 调度)\n\n#### 2.调度器历史\n\n今天的 Go 语言调度器有着优异的性能，但是如果我们回头看 Go 语言的 0.x 版本的调度器就会发现最初的调度器不仅实现非常简陋，也无法支撑高并发的服务。调度器经过几个大版本的迭代才有今天的优异性能，几个不同版本的调度器引入了不同的改进，也存在不同的缺陷:\n\n- [单线程调度器](#单线程调度器) ·0.x\n  - 只包含 40 多行代码；\n  - 程序中只能存在一个活跃线程，由 G-M 模型组成；\n- [多线程调度器](#多线程调度器) ·1.0\n  - 允许运行多线程的程序；\n  - 全局锁导致竞争严重；\n- 任务窃取调度器 ·1.1\n  - 引入了处理器 P，构成了目前的 **G-M-P** 模型；\n  - 在处理器 P 的基础上实现了基于**工作窃取**的调度器；\n  - 在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；\n  - 时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；\n- 抢占式调度器 ·1.2~ 至今\n  - 基于协作的抢占式调度器 - 1.2 ~ 1.13\n    - 通过编译器在函数调用时插入**抢占检查**指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度；\n    - Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；\n  - 基于信号的抢占式调度器 - 1.14 ~ 至今\n    - 实现**基于信号的真抢占式调度**；\n    - 垃圾回收在扫描栈时会触发抢占调度；\n    - 抢占的时间点不够多，还不能覆盖全部的边缘情况；\n\n\n\n其中1.1版本之前的调度器未使用GMP模型，2012年之后golang开始引入GMP模型并实现了几个版本的调度器\n\n先来分析被废弃的老版本调度器的设计原理与实现：\n\n老版本的调度器只存在两个角色，即G&M\n\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/G%26M.png\" style=\"zoom:67%;\" />\n\n老版本的调度器包括0.x的单线程调度器（几乎不可用）和1.0的多线程调度器，总体的实现思路如下（0.x版本只有M0）\n\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/GM%E8%B0%83%E5%BA%A6%E5%99%A8.png\" style=\"zoom:67%;\" />\n\n##### 单线程调度器\n\n0.x 版本调度器只包含表示 Goroutine 的 G 和表示线程的 M 两种结构，全局也只有一个线程。我们可以在 [clean up scheduler](https://github.com/golang/go/commit/96824000ed89d13665f6f24ddc10b3bf812e7f47) 提交中找到单线程调度器的源代码，在这时 Go 语言的[调度器](https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c)还是由 C 语言实现的，调度函数 [`runtime.schedule`](https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c#L340) 也只包含 40 多行代码 ：\n\n```c\nstatic void scheduler(void) {\n\tG* gp;\n\t//获取调度器的全局锁；\n\tlock(&sched);\n\t//调用 runtime.gosave 保存栈寄存器和程序计数器；\n\tif(gosave(&m->sched)){\n\t\tlock(&sched);\n\t\tgp = m->curg;\n\t\tswitch(gp->status){\n\t\tcase Grunnable:\n\t\tcase Grunning:\n\t\t\tgp->status = Grunnable;\n\t\t\tgput(gp);\n\t\t\tbreak;\n\t\t...\n\t\t}\n\t\tnotewakeup(&gp->stopped);\n\t}\n\t//调用 runtime.nextgandunlock 获取下一个需要运行的 Goroutine 并解锁调度器；\n\tgp = nextgandunlock();\n\tnoteclear(&gp->stopped);\n\tgp->status = Grunning;\n\t//修改全局线程 m 上要执行的 Goroutine；\n\tm->curg = gp;\n\tg = gp;\n\t//调用 runtime.gogo 函数运行最新的 Goroutine；\n\tgogo(&gp->sched);\n}\n```\n\n##### 多线程调度器\n\nGo 语言在 1.0 版本正式发布时就支持了多线程的调度器，与上一个版本几乎不可用的调度器相比，Go 语言团队在这一阶段实现了从不可用到可用的跨越。我们可以在 [`pkg/runtime/proc.c`](https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c) 文件中找到 1.0.1 版本的调度器，多线程版本的调度函数 [`runtime.schedule`](https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c#L838) 包含 70 多行代码，我们在这里保留了该函数的核心逻辑：\n\n```c\nstatic void schedule(G *gp) {\n\tschedlock();\n\tif(gp != nil) {\n\t\tgp->m = nil;\n\t\tuint32 v = runtime·xadd(&runtime·sched.atomic, -1<<mcpuShift);\n\t\tif(atomic_mcpu(v) > maxgomaxprocs)\n\t\t\truntime·throw(\"negative mcpu in scheduler\");\n\n\t\tswitch(gp->status){\n\t\tcase Grunning:\n\t\t\tgp->status = Grunnable;\n\t\t\tgput(gp);\n\t\t\tbreak;\n\t\tcase ...:\n\t\t}\n\t} else {\n\t\t...\n\t}\n\tgp = nextgandunlock();\n\tgp->status = Grunning;\n\tm->curg = gp;\n\tgp->m = m;\n\truntime·gogo(&gp->sched, 0);\n}\n```\n\n整体的逻辑与单线程调度器没有太多区别，因为我们的程序中可能同时存在多个活跃线程，所以多线程调度器引入了 `GOMAXPROCS` 变量帮助我们灵活控制程序中的最大处理器数，即活跃线程数。\n\nM 想要执行、放回 G 都必须访问全局 G 队列，并且 M 有多个，即多线程**访问同一资源需要加锁进行保证互斥 / 同步**，所以全局 G 队列是有互斥锁进行保护的。\n\n老调度器有几个缺点：\n\n1.创建、销毁、调度 G 都需要每个 M 获取锁，这就形成了激烈的锁竞争。\n2.M 转移 G 会造成延迟和额外的系统负载。比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。\n3.系统调用 (CPU 在 M 之间的切换) 导致频繁的线程阻塞和取消阻塞操作增加了系统开销。\n\n基于以上问题，2012年Google 的工程师 Dmitry Vyukov 在G-M模型的基础上提出了G-M-P模型\n\n#### 3.基于G-M-P模型的调度器\n\n在新调度器中，出列 M (thread) 和 G (goroutine)，又引进了 P (Processor)。\n\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/GMP.png\" style=\"zoom:67%;\" />\n\n#####  GMP 模型\n\n在 Go 中，**线程是运行 goroutine 的实体，调度器的功能是把可运行的 goroutine 分配到工作线程上**。\n\n![](https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/gmp%E6%B5%81%E7%A8%8B.jpeg)\n\n全局队列（Global Queue）：存放等待运行的 G。\nP 的本地队列：同全局队列类似，存放的也是等待运行的 G，存的数量有限，不超过 256 个。新建 G’时，G’优先加入到 P 的本地队列，如果队列满了，则会把本地队列中一半的 G 移动到全局队列。\nP 列表：所有的 P 都在程序启动时创建，并保存在数组中，最多有 GOMAXPROCS(可配置) 个。\nM：线程想运行任务就得获取 P，从 P 的本地队列获取 G，P 队列为空时，M 也会尝试从全局队列拿一批 G 放到 P 的本地队列，或从其他 P 的本地队列偷一半放到自己 P 的本地队列。M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。\nGoroutine 调度器和 OS 调度器是通过 M 结合起来的，每个 M 都代表了 1 个内核线程，OS 调度器负责把内核线程分配到 CPU 的核上执行。\n\n**运行时 G-M-P 模型中引入的处理器 P 是线程和 Goroutine 的中间层，我们从它的结构体中就能看到处理器与 M 和 G 的关系**：\n\n```c\nstruct P {\n\tLock;\n\n\tuint32\tstatus;\n\tP*\tlink;\n\tuint32\ttick;\n\tM*\tm;\n\tMCache*\tmcache;\n\n\tG**\trunq;\n\tint32\trunqhead;\n\tint32\trunqtail;\n\tint32\trunqsize;\n\n\tG*\tgfree;\n\tint32\tgfreecnt;\n};\n\n```\n\n处理器持有一个由可运行的 Goroutine 组成的环形的运行队列 `runq`（本地队列），还反向持有一个线程。调度器在调度时会从处理器的队列中选择队列头的 Goroutine 放到线程 M 上执行\n\n第一版实现GMP模型的是Golang1.1的任务窃取调度器\n\n##### 任务窃取调度器\n\n```c\nstatic void schedule(void) {\n    G *gp;\n top:\n \t\t//如果当前运行时在等待垃圾回收，调用 runtime.gcstopm 函数；\n    if(runtime·gcwaiting) {\n        gcstopm();\n        goto top;\n    }\n\t\t//调用 runtime.runqget 和 runtime.findrunnable 从本地或者全局的运行队列中获取待执行的 Goroutine；\n    gp = runqget(m->p);\n    if(gp == nil)\n        gp = findrunnable();\n\n    ...\n\t\t//调用 runtime.execute 函数在当前线程 M 上运行 Goroutine；\n    execute(gp);\n}\n```\n\n\n\n##### 有关 P 和 M 的个数问题\n\n1、P 的数量：\n\n由启动时环境变量 $GOMAXPROCS 或者是由 runtime 的方法 GOMAXPROCS() 决定。这意味着在程序执行的任意时刻都只有 $GOMAXPROCS 个 goroutine 在同时运行。\n2、M 的数量:\n\ngo 语言本身的限制：go 程序启动时，会设置 M 的最大数量，默认 10000. 但是内核很难支持这么多的线程数，所以这个限制可以忽略。\nruntime/debug 中的 SetMaxThreads 函数，设置 M 的最大数量\n一个 M 阻塞了，会创建新的 M。\nM 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。\n\n##### P 和 M 何时会被创建\n\n1、P 何时创建：在确定了 P 的最大数量 n 后，运行时系统会根据这个数量创建 n 个 P。\n\n2、M 何时创建：没有足够的 M 来关联 P 并运行其中的可运行的 G。比如所有的 M 此时都阻塞住了，而 P 中还有很多就绪任务，就会去寻找空闲的 M，而没有空闲的，就会去创建新的 M。","source":"_posts/GMP.md","raw":"---\ntitle: Golang GMP调度器\ndate: 2023-07-03 17:04:35\ntags: [GMP,golang,源码]\n---\n\n# Golang GMP调度器\n\n### 一、进程与线程\n\n1.**进程**是操作系统进行资源分配和调度的一个独立单位，不同的进程通过进程间通信来通信。**由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大**，但相对比较稳定安全。\n\n2.**线程**是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，**上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据**。\n\n虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1 兆以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间[1](https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:1)，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销[2](https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:2)。\n\n##### **Go 语言的调度器通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。**\n\n### 二、Golang调度器\n\n#### 1.Go 语言的协程 goroutine\n\nGo 为了提供更容易使用的并发方法，使用了 goroutine 和 channel。goroutine 来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被 runtime 调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。\n\nGo 中，协程被称为 goroutine，它非常轻量，一个 goroutine 只占几 KB，并且这几 KB 就足够 goroutine 运行完，这就能在有限的内存空间内支持大量 goroutine，支持了更多的并发。虽然一个 goroutine 的栈只占几 KB，但实际是可伸缩的，如果需要更多内容，runtime 会自动为 goroutine 分配。\n\nGoroutine 特点：\n\n占用内存更小（几 kb）\n调度更灵活 (runtime 调度)\n\n#### 2.调度器历史\n\n今天的 Go 语言调度器有着优异的性能，但是如果我们回头看 Go 语言的 0.x 版本的调度器就会发现最初的调度器不仅实现非常简陋，也无法支撑高并发的服务。调度器经过几个大版本的迭代才有今天的优异性能，几个不同版本的调度器引入了不同的改进，也存在不同的缺陷:\n\n- [单线程调度器](#单线程调度器) ·0.x\n  - 只包含 40 多行代码；\n  - 程序中只能存在一个活跃线程，由 G-M 模型组成；\n- [多线程调度器](#多线程调度器) ·1.0\n  - 允许运行多线程的程序；\n  - 全局锁导致竞争严重；\n- 任务窃取调度器 ·1.1\n  - 引入了处理器 P，构成了目前的 **G-M-P** 模型；\n  - 在处理器 P 的基础上实现了基于**工作窃取**的调度器；\n  - 在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；\n  - 时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；\n- 抢占式调度器 ·1.2~ 至今\n  - 基于协作的抢占式调度器 - 1.2 ~ 1.13\n    - 通过编译器在函数调用时插入**抢占检查**指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度；\n    - Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；\n  - 基于信号的抢占式调度器 - 1.14 ~ 至今\n    - 实现**基于信号的真抢占式调度**；\n    - 垃圾回收在扫描栈时会触发抢占调度；\n    - 抢占的时间点不够多，还不能覆盖全部的边缘情况；\n\n\n\n其中1.1版本之前的调度器未使用GMP模型，2012年之后golang开始引入GMP模型并实现了几个版本的调度器\n\n先来分析被废弃的老版本调度器的设计原理与实现：\n\n老版本的调度器只存在两个角色，即G&M\n\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/G%26M.png\" style=\"zoom:67%;\" />\n\n老版本的调度器包括0.x的单线程调度器（几乎不可用）和1.0的多线程调度器，总体的实现思路如下（0.x版本只有M0）\n\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/GM%E8%B0%83%E5%BA%A6%E5%99%A8.png\" style=\"zoom:67%;\" />\n\n##### 单线程调度器\n\n0.x 版本调度器只包含表示 Goroutine 的 G 和表示线程的 M 两种结构，全局也只有一个线程。我们可以在 [clean up scheduler](https://github.com/golang/go/commit/96824000ed89d13665f6f24ddc10b3bf812e7f47) 提交中找到单线程调度器的源代码，在这时 Go 语言的[调度器](https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c)还是由 C 语言实现的，调度函数 [`runtime.schedule`](https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c#L340) 也只包含 40 多行代码 ：\n\n```c\nstatic void scheduler(void) {\n\tG* gp;\n\t//获取调度器的全局锁；\n\tlock(&sched);\n\t//调用 runtime.gosave 保存栈寄存器和程序计数器；\n\tif(gosave(&m->sched)){\n\t\tlock(&sched);\n\t\tgp = m->curg;\n\t\tswitch(gp->status){\n\t\tcase Grunnable:\n\t\tcase Grunning:\n\t\t\tgp->status = Grunnable;\n\t\t\tgput(gp);\n\t\t\tbreak;\n\t\t...\n\t\t}\n\t\tnotewakeup(&gp->stopped);\n\t}\n\t//调用 runtime.nextgandunlock 获取下一个需要运行的 Goroutine 并解锁调度器；\n\tgp = nextgandunlock();\n\tnoteclear(&gp->stopped);\n\tgp->status = Grunning;\n\t//修改全局线程 m 上要执行的 Goroutine；\n\tm->curg = gp;\n\tg = gp;\n\t//调用 runtime.gogo 函数运行最新的 Goroutine；\n\tgogo(&gp->sched);\n}\n```\n\n##### 多线程调度器\n\nGo 语言在 1.0 版本正式发布时就支持了多线程的调度器，与上一个版本几乎不可用的调度器相比，Go 语言团队在这一阶段实现了从不可用到可用的跨越。我们可以在 [`pkg/runtime/proc.c`](https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c) 文件中找到 1.0.1 版本的调度器，多线程版本的调度函数 [`runtime.schedule`](https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c#L838) 包含 70 多行代码，我们在这里保留了该函数的核心逻辑：\n\n```c\nstatic void schedule(G *gp) {\n\tschedlock();\n\tif(gp != nil) {\n\t\tgp->m = nil;\n\t\tuint32 v = runtime·xadd(&runtime·sched.atomic, -1<<mcpuShift);\n\t\tif(atomic_mcpu(v) > maxgomaxprocs)\n\t\t\truntime·throw(\"negative mcpu in scheduler\");\n\n\t\tswitch(gp->status){\n\t\tcase Grunning:\n\t\t\tgp->status = Grunnable;\n\t\t\tgput(gp);\n\t\t\tbreak;\n\t\tcase ...:\n\t\t}\n\t} else {\n\t\t...\n\t}\n\tgp = nextgandunlock();\n\tgp->status = Grunning;\n\tm->curg = gp;\n\tgp->m = m;\n\truntime·gogo(&gp->sched, 0);\n}\n```\n\n整体的逻辑与单线程调度器没有太多区别，因为我们的程序中可能同时存在多个活跃线程，所以多线程调度器引入了 `GOMAXPROCS` 变量帮助我们灵活控制程序中的最大处理器数，即活跃线程数。\n\nM 想要执行、放回 G 都必须访问全局 G 队列，并且 M 有多个，即多线程**访问同一资源需要加锁进行保证互斥 / 同步**，所以全局 G 队列是有互斥锁进行保护的。\n\n老调度器有几个缺点：\n\n1.创建、销毁、调度 G 都需要每个 M 获取锁，这就形成了激烈的锁竞争。\n2.M 转移 G 会造成延迟和额外的系统负载。比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。\n3.系统调用 (CPU 在 M 之间的切换) 导致频繁的线程阻塞和取消阻塞操作增加了系统开销。\n\n基于以上问题，2012年Google 的工程师 Dmitry Vyukov 在G-M模型的基础上提出了G-M-P模型\n\n#### 3.基于G-M-P模型的调度器\n\n在新调度器中，出列 M (thread) 和 G (goroutine)，又引进了 P (Processor)。\n\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/GMP.png\" style=\"zoom:67%;\" />\n\n#####  GMP 模型\n\n在 Go 中，**线程是运行 goroutine 的实体，调度器的功能是把可运行的 goroutine 分配到工作线程上**。\n\n![](https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/gmp%E6%B5%81%E7%A8%8B.jpeg)\n\n全局队列（Global Queue）：存放等待运行的 G。\nP 的本地队列：同全局队列类似，存放的也是等待运行的 G，存的数量有限，不超过 256 个。新建 G’时，G’优先加入到 P 的本地队列，如果队列满了，则会把本地队列中一半的 G 移动到全局队列。\nP 列表：所有的 P 都在程序启动时创建，并保存在数组中，最多有 GOMAXPROCS(可配置) 个。\nM：线程想运行任务就得获取 P，从 P 的本地队列获取 G，P 队列为空时，M 也会尝试从全局队列拿一批 G 放到 P 的本地队列，或从其他 P 的本地队列偷一半放到自己 P 的本地队列。M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。\nGoroutine 调度器和 OS 调度器是通过 M 结合起来的，每个 M 都代表了 1 个内核线程，OS 调度器负责把内核线程分配到 CPU 的核上执行。\n\n**运行时 G-M-P 模型中引入的处理器 P 是线程和 Goroutine 的中间层，我们从它的结构体中就能看到处理器与 M 和 G 的关系**：\n\n```c\nstruct P {\n\tLock;\n\n\tuint32\tstatus;\n\tP*\tlink;\n\tuint32\ttick;\n\tM*\tm;\n\tMCache*\tmcache;\n\n\tG**\trunq;\n\tint32\trunqhead;\n\tint32\trunqtail;\n\tint32\trunqsize;\n\n\tG*\tgfree;\n\tint32\tgfreecnt;\n};\n\n```\n\n处理器持有一个由可运行的 Goroutine 组成的环形的运行队列 `runq`（本地队列），还反向持有一个线程。调度器在调度时会从处理器的队列中选择队列头的 Goroutine 放到线程 M 上执行\n\n第一版实现GMP模型的是Golang1.1的任务窃取调度器\n\n##### 任务窃取调度器\n\n```c\nstatic void schedule(void) {\n    G *gp;\n top:\n \t\t//如果当前运行时在等待垃圾回收，调用 runtime.gcstopm 函数；\n    if(runtime·gcwaiting) {\n        gcstopm();\n        goto top;\n    }\n\t\t//调用 runtime.runqget 和 runtime.findrunnable 从本地或者全局的运行队列中获取待执行的 Goroutine；\n    gp = runqget(m->p);\n    if(gp == nil)\n        gp = findrunnable();\n\n    ...\n\t\t//调用 runtime.execute 函数在当前线程 M 上运行 Goroutine；\n    execute(gp);\n}\n```\n\n\n\n##### 有关 P 和 M 的个数问题\n\n1、P 的数量：\n\n由启动时环境变量 $GOMAXPROCS 或者是由 runtime 的方法 GOMAXPROCS() 决定。这意味着在程序执行的任意时刻都只有 $GOMAXPROCS 个 goroutine 在同时运行。\n2、M 的数量:\n\ngo 语言本身的限制：go 程序启动时，会设置 M 的最大数量，默认 10000. 但是内核很难支持这么多的线程数，所以这个限制可以忽略。\nruntime/debug 中的 SetMaxThreads 函数，设置 M 的最大数量\n一个 M 阻塞了，会创建新的 M。\nM 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。\n\n##### P 和 M 何时会被创建\n\n1、P 何时创建：在确定了 P 的最大数量 n 后，运行时系统会根据这个数量创建 n 个 P。\n\n2、M 何时创建：没有足够的 M 来关联 P 并运行其中的可运行的 G。比如所有的 M 此时都阻塞住了，而 P 中还有很多就绪任务，就会去寻找空闲的 M，而没有空闲的，就会去创建新的 M。","slug":"GMP","published":1,"updated":"2023-07-03T09:35:13.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljmpiaa80001iqc9bvgv53yi","content":"<h1 id=\"Golang-GMP调度器\"><a href=\"#Golang-GMP调度器\" class=\"headerlink\" title=\"Golang GMP调度器\"></a>Golang GMP调度器</h1><h3 id=\"一、进程与线程\"><a href=\"#一、进程与线程\" class=\"headerlink\" title=\"一、进程与线程\"></a>一、进程与线程</h3><p>1.<strong>进程</strong>是操作系统进行资源分配和调度的一个独立单位，不同的进程通过进程间通信来通信。<strong>由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大</strong>，但相对比较稳定安全。</p>\n<p>2.<strong>线程</strong>是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，<strong>上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据</strong>。</p>\n<p>虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1 兆以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间<a href=\"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:1\">1</a>，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销<a href=\"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:2\">2</a>。</p>\n<h5 id=\"Go-语言的调度器通过使用与-CPU-数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的-Goroutine-来降低操作系统和硬件的负载。\"><a href=\"#Go-语言的调度器通过使用与-CPU-数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的-Goroutine-来降低操作系统和硬件的负载。\" class=\"headerlink\" title=\"Go 语言的调度器通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。\"></a><strong>Go 语言的调度器通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。</strong></h5><h3 id=\"二、Golang调度器\"><a href=\"#二、Golang调度器\" class=\"headerlink\" title=\"二、Golang调度器\"></a>二、Golang调度器</h3><h4 id=\"1-Go-语言的协程-goroutine\"><a href=\"#1-Go-语言的协程-goroutine\" class=\"headerlink\" title=\"1.Go 语言的协程 goroutine\"></a>1.Go 语言的协程 goroutine</h4><p>Go 为了提供更容易使用的并发方法，使用了 goroutine 和 channel。goroutine 来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被 runtime 调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。</p>\n<p>Go 中，协程被称为 goroutine，它非常轻量，一个 goroutine 只占几 KB，并且这几 KB 就足够 goroutine 运行完，这就能在有限的内存空间内支持大量 goroutine，支持了更多的并发。虽然一个 goroutine 的栈只占几 KB，但实际是可伸缩的，如果需要更多内容，runtime 会自动为 goroutine 分配。</p>\n<p>Goroutine 特点：</p>\n<p>占用内存更小（几 kb）<br>调度更灵活 (runtime 调度)</p>\n<h4 id=\"2-调度器历史\"><a href=\"#2-调度器历史\" class=\"headerlink\" title=\"2.调度器历史\"></a>2.调度器历史</h4><p>今天的 Go 语言调度器有着优异的性能，但是如果我们回头看 Go 语言的 0.x 版本的调度器就会发现最初的调度器不仅实现非常简陋，也无法支撑高并发的服务。调度器经过几个大版本的迭代才有今天的优异性能，几个不同版本的调度器引入了不同的改进，也存在不同的缺陷:</p>\n<ul>\n<li><a href=\"#%E5%8D%95%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8\">单线程调度器</a> ·0.x<ul>\n<li>只包含 40 多行代码；</li>\n<li>程序中只能存在一个活跃线程，由 G-M 模型组成；</li>\n</ul>\n</li>\n<li><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8\">多线程调度器</a> ·1.0<ul>\n<li>允许运行多线程的程序；</li>\n<li>全局锁导致竞争严重；</li>\n</ul>\n</li>\n<li>任务窃取调度器 ·1.1<ul>\n<li>引入了处理器 P，构成了目前的 <strong>G-M-P</strong> 模型；</li>\n<li>在处理器 P 的基础上实现了基于<strong>工作窃取</strong>的调度器；</li>\n<li>在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；</li>\n<li>时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；</li>\n</ul>\n</li>\n<li>抢占式调度器 ·1.2~ 至今<ul>\n<li>基于协作的抢占式调度器 - 1.2 ~ 1.13<ul>\n<li>通过编译器在函数调用时插入<strong>抢占检查</strong>指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度；</li>\n<li>Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；</li>\n</ul>\n</li>\n<li>基于信号的抢占式调度器 - 1.14 ~ 至今<ul>\n<li>实现<strong>基于信号的真抢占式调度</strong>；</li>\n<li>垃圾回收在扫描栈时会触发抢占调度；</li>\n<li>抢占的时间点不够多，还不能覆盖全部的边缘情况；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>其中1.1版本之前的调度器未使用GMP模型，2012年之后golang开始引入GMP模型并实现了几个版本的调度器</p>\n<p>先来分析被废弃的老版本调度器的设计原理与实现：</p>\n<p>老版本的调度器只存在两个角色，即G&amp;M</p>\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/G%26M.png\" style=\"zoom:67%;\" />\n\n<p>老版本的调度器包括0.x的单线程调度器（几乎不可用）和1.0的多线程调度器，总体的实现思路如下（0.x版本只有M0）</p>\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/GM%E8%B0%83%E5%BA%A6%E5%99%A8.png\" style=\"zoom:67%;\" />\n\n<h5 id=\"单线程调度器\"><a href=\"#单线程调度器\" class=\"headerlink\" title=\"单线程调度器\"></a>单线程调度器</h5><p>0.x 版本调度器只包含表示 Goroutine 的 G 和表示线程的 M 两种结构，全局也只有一个线程。我们可以在 <a href=\"https://github.com/golang/go/commit/96824000ed89d13665f6f24ddc10b3bf812e7f47\">clean up scheduler</a> 提交中找到单线程调度器的源代码，在这时 Go 语言的<a href=\"https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c\">调度器</a>还是由 C 语言实现的，调度函数 <a href=\"https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c#L340\"><code>runtime.schedule</code></a> 也只包含 40 多行代码 ：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">scheduler</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\tG* gp;</span><br><span class=\"line\">\t<span class=\"comment\">//获取调度器的全局锁；</span></span><br><span class=\"line\">\tlock(&amp;sched);</span><br><span class=\"line\">\t<span class=\"comment\">//调用 runtime.gosave 保存栈寄存器和程序计数器；</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(gosave(&amp;m-&gt;sched))&#123;</span><br><span class=\"line\">\t\tlock(&amp;sched);</span><br><span class=\"line\">\t\tgp = m-&gt;curg;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(gp-&gt;status)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> Grunnable:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> Grunning:</span><br><span class=\"line\">\t\t\tgp-&gt;status = Grunnable;</span><br><span class=\"line\">\t\t\tgput(gp);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnotewakeup(&amp;gp-&gt;stopped);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//调用 runtime.nextgandunlock 获取下一个需要运行的 Goroutine 并解锁调度器；</span></span><br><span class=\"line\">\tgp = nextgandunlock();</span><br><span class=\"line\">\tnoteclear(&amp;gp-&gt;stopped);</span><br><span class=\"line\">\tgp-&gt;status = Grunning;</span><br><span class=\"line\">\t<span class=\"comment\">//修改全局线程 m 上要执行的 Goroutine；</span></span><br><span class=\"line\">\tm-&gt;curg = gp;</span><br><span class=\"line\">\tg = gp;</span><br><span class=\"line\">\t<span class=\"comment\">//调用 runtime.gogo 函数运行最新的 Goroutine；</span></span><br><span class=\"line\">\tgogo(&amp;gp-&gt;sched);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多线程调度器\"><a href=\"#多线程调度器\" class=\"headerlink\" title=\"多线程调度器\"></a>多线程调度器</h5><p>Go 语言在 1.0 版本正式发布时就支持了多线程的调度器，与上一个版本几乎不可用的调度器相比，Go 语言团队在这一阶段实现了从不可用到可用的跨越。我们可以在 <a href=\"https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c\"><code>pkg/runtime/proc.c</code></a> 文件中找到 1.0.1 版本的调度器，多线程版本的调度函数 <a href=\"https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c#L838\"><code>runtime.schedule</code></a> 包含 70 多行代码，我们在这里保留了该函数的核心逻辑：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">schedule</span><span class=\"params\">(G *gp)</span> &#123;</span><br><span class=\"line\">\tschedlock();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(gp != nil) &#123;</span><br><span class=\"line\">\t\tgp-&gt;m = nil;</span><br><span class=\"line\">\t\tuint32 v = runtime·xadd(&amp;runtime·sched.atomic, <span class=\"number\">-1</span>&lt;&lt;mcpuShift);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"type\">atomic_mcpu</span>(v) &gt; maxgomaxprocs)</span><br><span class=\"line\">\t\t\truntime·throw(<span class=\"string\">&quot;negative mcpu in scheduler&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(gp-&gt;status)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> Grunning:</span><br><span class=\"line\">\t\t\tgp-&gt;status = Grunnable;</span><br><span class=\"line\">\t\t\tgput(gp);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> ...:</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgp = nextgandunlock();</span><br><span class=\"line\">\tgp-&gt;status = Grunning;</span><br><span class=\"line\">\tm-&gt;curg = gp;</span><br><span class=\"line\">\tgp-&gt;m = m;</span><br><span class=\"line\">\truntime·gogo(&amp;gp-&gt;sched, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整体的逻辑与单线程调度器没有太多区别，因为我们的程序中可能同时存在多个活跃线程，所以多线程调度器引入了 <code>GOMAXPROCS</code> 变量帮助我们灵活控制程序中的最大处理器数，即活跃线程数。</p>\n<p>M 想要执行、放回 G 都必须访问全局 G 队列，并且 M 有多个，即多线程<strong>访问同一资源需要加锁进行保证互斥 &#x2F; 同步</strong>，所以全局 G 队列是有互斥锁进行保护的。</p>\n<p>老调度器有几个缺点：</p>\n<p>1.创建、销毁、调度 G 都需要每个 M 获取锁，这就形成了激烈的锁竞争。<br>2.M 转移 G 会造成延迟和额外的系统负载。比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。<br>3.系统调用 (CPU 在 M 之间的切换) 导致频繁的线程阻塞和取消阻塞操作增加了系统开销。</p>\n<p>基于以上问题，2012年Google 的工程师 Dmitry Vyukov 在G-M模型的基础上提出了G-M-P模型</p>\n<h4 id=\"3-基于G-M-P模型的调度器\"><a href=\"#3-基于G-M-P模型的调度器\" class=\"headerlink\" title=\"3.基于G-M-P模型的调度器\"></a>3.基于G-M-P模型的调度器</h4><p>在新调度器中，出列 M (thread) 和 G (goroutine)，又引进了 P (Processor)。</p>\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/GMP.png\" style=\"zoom:67%;\" />\n\n<h5 id=\"GMP-模型\"><a href=\"#GMP-模型\" class=\"headerlink\" title=\"GMP 模型\"></a>GMP 模型</h5><p>在 Go 中，<strong>线程是运行 goroutine 的实体，调度器的功能是把可运行的 goroutine 分配到工作线程上</strong>。</p>\n<p><img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/gmp%E6%B5%81%E7%A8%8B.jpeg\"></p>\n<p>全局队列（Global Queue）：存放等待运行的 G。<br>P 的本地队列：同全局队列类似，存放的也是等待运行的 G，存的数量有限，不超过 256 个。新建 G’时，G’优先加入到 P 的本地队列，如果队列满了，则会把本地队列中一半的 G 移动到全局队列。<br>P 列表：所有的 P 都在程序启动时创建，并保存在数组中，最多有 GOMAXPROCS(可配置) 个。<br>M：线程想运行任务就得获取 P，从 P 的本地队列获取 G，P 队列为空时，M 也会尝试从全局队列拿一批 G 放到 P 的本地队列，或从其他 P 的本地队列偷一半放到自己 P 的本地队列。M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。<br>Goroutine 调度器和 OS 调度器是通过 M 结合起来的，每个 M 都代表了 1 个内核线程，OS 调度器负责把内核线程分配到 CPU 的核上执行。</p>\n<p><strong>运行时 G-M-P 模型中引入的处理器 P 是线程和 Goroutine 的中间层，我们从它的结构体中就能看到处理器与 M 和 G 的关系</strong>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">P</span> &#123;</span></span><br><span class=\"line\">\tLock;</span><br><span class=\"line\"></span><br><span class=\"line\">\tuint32\tstatus;</span><br><span class=\"line\">\tP*\tlink;</span><br><span class=\"line\">\tuint32\ttick;</span><br><span class=\"line\">\tM*\tm;</span><br><span class=\"line\">\tMCache*\tmcache;</span><br><span class=\"line\"></span><br><span class=\"line\">\tG**\trunq;</span><br><span class=\"line\">\tint32\trunqhead;</span><br><span class=\"line\">\tint32\trunqtail;</span><br><span class=\"line\">\tint32\trunqsize;</span><br><span class=\"line\"></span><br><span class=\"line\">\tG*\tgfree;</span><br><span class=\"line\">\tint32\tgfreecnt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>处理器持有一个由可运行的 Goroutine 组成的环形的运行队列 <code>runq</code>（本地队列），还反向持有一个线程。调度器在调度时会从处理器的队列中选择队列头的 Goroutine 放到线程 M 上执行</p>\n<p>第一版实现GMP模型的是Golang1.1的任务窃取调度器</p>\n<h5 id=\"任务窃取调度器\"><a href=\"#任务窃取调度器\" class=\"headerlink\" title=\"任务窃取调度器\"></a>任务窃取调度器</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">schedule</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    G *gp;</span><br><span class=\"line\"> top:</span><br><span class=\"line\"> \t\t<span class=\"comment\">//如果当前运行时在等待垃圾回收，调用 runtime.gcstopm 函数；</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(runtime·gcwaiting) &#123;</span><br><span class=\"line\">        gcstopm();</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> top;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//调用 runtime.runqget 和 runtime.findrunnable 从本地或者全局的运行队列中获取待执行的 Goroutine；</span></span><br><span class=\"line\">    gp = runqget(m-&gt;p);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(gp == nil)</span><br><span class=\"line\">        gp = findrunnable();</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t\t<span class=\"comment\">//调用 runtime.execute 函数在当前线程 M 上运行 Goroutine；</span></span><br><span class=\"line\">    execute(gp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"有关-P-和-M-的个数问题\"><a href=\"#有关-P-和-M-的个数问题\" class=\"headerlink\" title=\"有关 P 和 M 的个数问题\"></a>有关 P 和 M 的个数问题</h5><p>1、P 的数量：</p>\n<p>由启动时环境变量 $GOMAXPROCS 或者是由 runtime 的方法 GOMAXPROCS() 决定。这意味着在程序执行的任意时刻都只有 $GOMAXPROCS 个 goroutine 在同时运行。<br>2、M 的数量:</p>\n<p>go 语言本身的限制：go 程序启动时，会设置 M 的最大数量，默认 10000. 但是内核很难支持这么多的线程数，所以这个限制可以忽略。<br>runtime&#x2F;debug 中的 SetMaxThreads 函数，设置 M 的最大数量<br>一个 M 阻塞了，会创建新的 M。<br>M 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。</p>\n<h5 id=\"P-和-M-何时会被创建\"><a href=\"#P-和-M-何时会被创建\" class=\"headerlink\" title=\"P 和 M 何时会被创建\"></a>P 和 M 何时会被创建</h5><p>1、P 何时创建：在确定了 P 的最大数量 n 后，运行时系统会根据这个数量创建 n 个 P。</p>\n<p>2、M 何时创建：没有足够的 M 来关联 P 并运行其中的可运行的 G。比如所有的 M 此时都阻塞住了，而 P 中还有很多就绪任务，就会去寻找空闲的 M，而没有空闲的，就会去创建新的 M。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Golang-GMP调度器\"><a href=\"#Golang-GMP调度器\" class=\"headerlink\" title=\"Golang GMP调度器\"></a>Golang GMP调度器</h1><h3 id=\"一、进程与线程\"><a href=\"#一、进程与线程\" class=\"headerlink\" title=\"一、进程与线程\"></a>一、进程与线程</h3><p>1.<strong>进程</strong>是操作系统进行资源分配和调度的一个独立单位，不同的进程通过进程间通信来通信。<strong>由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大</strong>，但相对比较稳定安全。</p>\n<p>2.<strong>线程</strong>是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，<strong>上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据</strong>。</p>\n<p>虽然线程比较轻量，但是在调度时也有比较大的额外开销。每个线程会都占用 1 兆以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源，每一次线程上下文的切换都需要消耗 ~1us 左右的时间<a href=\"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:1\">1</a>，但是 Go 调度器对 Goroutine 的上下文切换约为 ~0.2us，减少了 80% 的额外开销<a href=\"https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#fn:2\">2</a>。</p>\n<h5 id=\"Go-语言的调度器通过使用与-CPU-数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的-Goroutine-来降低操作系统和硬件的负载。\"><a href=\"#Go-语言的调度器通过使用与-CPU-数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的-Goroutine-来降低操作系统和硬件的负载。\" class=\"headerlink\" title=\"Go 语言的调度器通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。\"></a><strong>Go 语言的调度器通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销，同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。</strong></h5><h3 id=\"二、Golang调度器\"><a href=\"#二、Golang调度器\" class=\"headerlink\" title=\"二、Golang调度器\"></a>二、Golang调度器</h3><h4 id=\"1-Go-语言的协程-goroutine\"><a href=\"#1-Go-语言的协程-goroutine\" class=\"headerlink\" title=\"1.Go 语言的协程 goroutine\"></a>1.Go 语言的协程 goroutine</h4><p>Go 为了提供更容易使用的并发方法，使用了 goroutine 和 channel。goroutine 来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被 runtime 调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。</p>\n<p>Go 中，协程被称为 goroutine，它非常轻量，一个 goroutine 只占几 KB，并且这几 KB 就足够 goroutine 运行完，这就能在有限的内存空间内支持大量 goroutine，支持了更多的并发。虽然一个 goroutine 的栈只占几 KB，但实际是可伸缩的，如果需要更多内容，runtime 会自动为 goroutine 分配。</p>\n<p>Goroutine 特点：</p>\n<p>占用内存更小（几 kb）<br>调度更灵活 (runtime 调度)</p>\n<h4 id=\"2-调度器历史\"><a href=\"#2-调度器历史\" class=\"headerlink\" title=\"2.调度器历史\"></a>2.调度器历史</h4><p>今天的 Go 语言调度器有着优异的性能，但是如果我们回头看 Go 语言的 0.x 版本的调度器就会发现最初的调度器不仅实现非常简陋，也无法支撑高并发的服务。调度器经过几个大版本的迭代才有今天的优异性能，几个不同版本的调度器引入了不同的改进，也存在不同的缺陷:</p>\n<ul>\n<li><a href=\"#%E5%8D%95%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8\">单线程调度器</a> ·0.x<ul>\n<li>只包含 40 多行代码；</li>\n<li>程序中只能存在一个活跃线程，由 G-M 模型组成；</li>\n</ul>\n</li>\n<li><a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8\">多线程调度器</a> ·1.0<ul>\n<li>允许运行多线程的程序；</li>\n<li>全局锁导致竞争严重；</li>\n</ul>\n</li>\n<li>任务窃取调度器 ·1.1<ul>\n<li>引入了处理器 P，构成了目前的 <strong>G-M-P</strong> 模型；</li>\n<li>在处理器 P 的基础上实现了基于<strong>工作窃取</strong>的调度器；</li>\n<li>在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；</li>\n<li>时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；</li>\n</ul>\n</li>\n<li>抢占式调度器 ·1.2~ 至今<ul>\n<li>基于协作的抢占式调度器 - 1.2 ~ 1.13<ul>\n<li>通过编译器在函数调用时插入<strong>抢占检查</strong>指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度；</li>\n<li>Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；</li>\n</ul>\n</li>\n<li>基于信号的抢占式调度器 - 1.14 ~ 至今<ul>\n<li>实现<strong>基于信号的真抢占式调度</strong>；</li>\n<li>垃圾回收在扫描栈时会触发抢占调度；</li>\n<li>抢占的时间点不够多，还不能覆盖全部的边缘情况；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>其中1.1版本之前的调度器未使用GMP模型，2012年之后golang开始引入GMP模型并实现了几个版本的调度器</p>\n<p>先来分析被废弃的老版本调度器的设计原理与实现：</p>\n<p>老版本的调度器只存在两个角色，即G&amp;M</p>\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/G%26M.png\" style=\"zoom:67%;\" />\n\n<p>老版本的调度器包括0.x的单线程调度器（几乎不可用）和1.0的多线程调度器，总体的实现思路如下（0.x版本只有M0）</p>\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/GM%E8%B0%83%E5%BA%A6%E5%99%A8.png\" style=\"zoom:67%;\" />\n\n<h5 id=\"单线程调度器\"><a href=\"#单线程调度器\" class=\"headerlink\" title=\"单线程调度器\"></a>单线程调度器</h5><p>0.x 版本调度器只包含表示 Goroutine 的 G 和表示线程的 M 两种结构，全局也只有一个线程。我们可以在 <a href=\"https://github.com/golang/go/commit/96824000ed89d13665f6f24ddc10b3bf812e7f47\">clean up scheduler</a> 提交中找到单线程调度器的源代码，在这时 Go 语言的<a href=\"https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c\">调度器</a>还是由 C 语言实现的，调度函数 <a href=\"https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c#L340\"><code>runtime.schedule</code></a> 也只包含 40 多行代码 ：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">scheduler</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\tG* gp;</span><br><span class=\"line\">\t<span class=\"comment\">//获取调度器的全局锁；</span></span><br><span class=\"line\">\tlock(&amp;sched);</span><br><span class=\"line\">\t<span class=\"comment\">//调用 runtime.gosave 保存栈寄存器和程序计数器；</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(gosave(&amp;m-&gt;sched))&#123;</span><br><span class=\"line\">\t\tlock(&amp;sched);</span><br><span class=\"line\">\t\tgp = m-&gt;curg;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(gp-&gt;status)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> Grunnable:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> Grunning:</span><br><span class=\"line\">\t\t\tgp-&gt;status = Grunnable;</span><br><span class=\"line\">\t\t\tgput(gp);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnotewakeup(&amp;gp-&gt;stopped);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//调用 runtime.nextgandunlock 获取下一个需要运行的 Goroutine 并解锁调度器；</span></span><br><span class=\"line\">\tgp = nextgandunlock();</span><br><span class=\"line\">\tnoteclear(&amp;gp-&gt;stopped);</span><br><span class=\"line\">\tgp-&gt;status = Grunning;</span><br><span class=\"line\">\t<span class=\"comment\">//修改全局线程 m 上要执行的 Goroutine；</span></span><br><span class=\"line\">\tm-&gt;curg = gp;</span><br><span class=\"line\">\tg = gp;</span><br><span class=\"line\">\t<span class=\"comment\">//调用 runtime.gogo 函数运行最新的 Goroutine；</span></span><br><span class=\"line\">\tgogo(&amp;gp-&gt;sched);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多线程调度器\"><a href=\"#多线程调度器\" class=\"headerlink\" title=\"多线程调度器\"></a>多线程调度器</h5><p>Go 语言在 1.0 版本正式发布时就支持了多线程的调度器，与上一个版本几乎不可用的调度器相比，Go 语言团队在这一阶段实现了从不可用到可用的跨越。我们可以在 <a href=\"https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c\"><code>pkg/runtime/proc.c</code></a> 文件中找到 1.0.1 版本的调度器，多线程版本的调度函数 <a href=\"https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c#L838\"><code>runtime.schedule</code></a> 包含 70 多行代码，我们在这里保留了该函数的核心逻辑：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">schedule</span><span class=\"params\">(G *gp)</span> &#123;</span><br><span class=\"line\">\tschedlock();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(gp != nil) &#123;</span><br><span class=\"line\">\t\tgp-&gt;m = nil;</span><br><span class=\"line\">\t\tuint32 v = runtime·xadd(&amp;runtime·sched.atomic, <span class=\"number\">-1</span>&lt;&lt;mcpuShift);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"type\">atomic_mcpu</span>(v) &gt; maxgomaxprocs)</span><br><span class=\"line\">\t\t\truntime·throw(<span class=\"string\">&quot;negative mcpu in scheduler&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(gp-&gt;status)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> Grunning:</span><br><span class=\"line\">\t\t\tgp-&gt;status = Grunnable;</span><br><span class=\"line\">\t\t\tgput(gp);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> ...:</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgp = nextgandunlock();</span><br><span class=\"line\">\tgp-&gt;status = Grunning;</span><br><span class=\"line\">\tm-&gt;curg = gp;</span><br><span class=\"line\">\tgp-&gt;m = m;</span><br><span class=\"line\">\truntime·gogo(&amp;gp-&gt;sched, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整体的逻辑与单线程调度器没有太多区别，因为我们的程序中可能同时存在多个活跃线程，所以多线程调度器引入了 <code>GOMAXPROCS</code> 变量帮助我们灵活控制程序中的最大处理器数，即活跃线程数。</p>\n<p>M 想要执行、放回 G 都必须访问全局 G 队列，并且 M 有多个，即多线程<strong>访问同一资源需要加锁进行保证互斥 &#x2F; 同步</strong>，所以全局 G 队列是有互斥锁进行保护的。</p>\n<p>老调度器有几个缺点：</p>\n<p>1.创建、销毁、调度 G 都需要每个 M 获取锁，这就形成了激烈的锁竞争。<br>2.M 转移 G 会造成延迟和额外的系统负载。比如当 G 中包含创建新协程的时候，M 创建了 G’，为了继续执行 G，需要把 G’交给 M’执行，也造成了很差的局部性，因为 G’和 G 是相关的，最好放在 M 上执行，而不是其他 M’。<br>3.系统调用 (CPU 在 M 之间的切换) 导致频繁的线程阻塞和取消阻塞操作增加了系统开销。</p>\n<p>基于以上问题，2012年Google 的工程师 Dmitry Vyukov 在G-M模型的基础上提出了G-M-P模型</p>\n<h4 id=\"3-基于G-M-P模型的调度器\"><a href=\"#3-基于G-M-P模型的调度器\" class=\"headerlink\" title=\"3.基于G-M-P模型的调度器\"></a>3.基于G-M-P模型的调度器</h4><p>在新调度器中，出列 M (thread) 和 G (goroutine)，又引进了 P (Processor)。</p>\n<img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/GMP.png\" style=\"zoom:67%;\" />\n\n<h5 id=\"GMP-模型\"><a href=\"#GMP-模型\" class=\"headerlink\" title=\"GMP 模型\"></a>GMP 模型</h5><p>在 Go 中，<strong>线程是运行 goroutine 的实体，调度器的功能是把可运行的 goroutine 分配到工作线程上</strong>。</p>\n<p><img src=\"https://blog-material-1303960709.cos.ap-nanjing.myqcloud.com/image/gmp%E6%B5%81%E7%A8%8B.jpeg\"></p>\n<p>全局队列（Global Queue）：存放等待运行的 G。<br>P 的本地队列：同全局队列类似，存放的也是等待运行的 G，存的数量有限，不超过 256 个。新建 G’时，G’优先加入到 P 的本地队列，如果队列满了，则会把本地队列中一半的 G 移动到全局队列。<br>P 列表：所有的 P 都在程序启动时创建，并保存在数组中，最多有 GOMAXPROCS(可配置) 个。<br>M：线程想运行任务就得获取 P，从 P 的本地队列获取 G，P 队列为空时，M 也会尝试从全局队列拿一批 G 放到 P 的本地队列，或从其他 P 的本地队列偷一半放到自己 P 的本地队列。M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。<br>Goroutine 调度器和 OS 调度器是通过 M 结合起来的，每个 M 都代表了 1 个内核线程，OS 调度器负责把内核线程分配到 CPU 的核上执行。</p>\n<p><strong>运行时 G-M-P 模型中引入的处理器 P 是线程和 Goroutine 的中间层，我们从它的结构体中就能看到处理器与 M 和 G 的关系</strong>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">P</span> &#123;</span></span><br><span class=\"line\">\tLock;</span><br><span class=\"line\"></span><br><span class=\"line\">\tuint32\tstatus;</span><br><span class=\"line\">\tP*\tlink;</span><br><span class=\"line\">\tuint32\ttick;</span><br><span class=\"line\">\tM*\tm;</span><br><span class=\"line\">\tMCache*\tmcache;</span><br><span class=\"line\"></span><br><span class=\"line\">\tG**\trunq;</span><br><span class=\"line\">\tint32\trunqhead;</span><br><span class=\"line\">\tint32\trunqtail;</span><br><span class=\"line\">\tint32\trunqsize;</span><br><span class=\"line\"></span><br><span class=\"line\">\tG*\tgfree;</span><br><span class=\"line\">\tint32\tgfreecnt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>处理器持有一个由可运行的 Goroutine 组成的环形的运行队列 <code>runq</code>（本地队列），还反向持有一个线程。调度器在调度时会从处理器的队列中选择队列头的 Goroutine 放到线程 M 上执行</p>\n<p>第一版实现GMP模型的是Golang1.1的任务窃取调度器</p>\n<h5 id=\"任务窃取调度器\"><a href=\"#任务窃取调度器\" class=\"headerlink\" title=\"任务窃取调度器\"></a>任务窃取调度器</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">schedule</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    G *gp;</span><br><span class=\"line\"> top:</span><br><span class=\"line\"> \t\t<span class=\"comment\">//如果当前运行时在等待垃圾回收，调用 runtime.gcstopm 函数；</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(runtime·gcwaiting) &#123;</span><br><span class=\"line\">        gcstopm();</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> top;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//调用 runtime.runqget 和 runtime.findrunnable 从本地或者全局的运行队列中获取待执行的 Goroutine；</span></span><br><span class=\"line\">    gp = runqget(m-&gt;p);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(gp == nil)</span><br><span class=\"line\">        gp = findrunnable();</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t\t<span class=\"comment\">//调用 runtime.execute 函数在当前线程 M 上运行 Goroutine；</span></span><br><span class=\"line\">    execute(gp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"有关-P-和-M-的个数问题\"><a href=\"#有关-P-和-M-的个数问题\" class=\"headerlink\" title=\"有关 P 和 M 的个数问题\"></a>有关 P 和 M 的个数问题</h5><p>1、P 的数量：</p>\n<p>由启动时环境变量 $GOMAXPROCS 或者是由 runtime 的方法 GOMAXPROCS() 决定。这意味着在程序执行的任意时刻都只有 $GOMAXPROCS 个 goroutine 在同时运行。<br>2、M 的数量:</p>\n<p>go 语言本身的限制：go 程序启动时，会设置 M 的最大数量，默认 10000. 但是内核很难支持这么多的线程数，所以这个限制可以忽略。<br>runtime&#x2F;debug 中的 SetMaxThreads 函数，设置 M 的最大数量<br>一个 M 阻塞了，会创建新的 M。<br>M 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。</p>\n<h5 id=\"P-和-M-何时会被创建\"><a href=\"#P-和-M-何时会被创建\" class=\"headerlink\" title=\"P 和 M 何时会被创建\"></a>P 和 M 何时会被创建</h5><p>1、P 何时创建：在确定了 P 的最大数量 n 后，运行时系统会根据这个数量创建 n 个 P。</p>\n<p>2、M 何时创建：没有足够的 M 来关联 P 并运行其中的可运行的 G。比如所有的 M 此时都阻塞住了，而 P 中还有很多就绪任务，就会去寻找空闲的 M，而没有空闲的，就会去创建新的 M。</p>\n"},{"title":"SkyWalking安装部署与集成","date":"2023-07-03T09:04:35.000Z","_content":"### 一、安装部署\n\n#### 1.官网下载安装包\n\nhttps://skywalking.apache.org/downloads/\n\n![image-20230601161536483](/Users/zhangshiyu/Library/Application Support/typora-user-images/image-20230601161536483.png)\n\n#### 2.下载tar包，解压\n\n```shell\ntar -zxvf apache-skywalking-apm-9.4.0.tar.gz\n```\n\n解压后文件目录为\n\n![image-20230601162235270](/Users/zhangshiyu/Library/Application Support/typora-user-images/image-20230601162235270.png)\n\n\n\n**Notice：！！！** skywalking运行依赖java的JDK11及以上版本 如果本机的java版本在11以下 先升级java版本到11以上\n\n通过以下命令确定java版本\n\n```shell\njava -version\n```\n\n#### 3.对服务进行配置（可以不配 先run起来）\n\n进入config目录 找到application.yml\n\n```shell\nvim application.yml\n```\n\n打开配置文件，找到如下段落\n\n```yaml\n...\nstorage:\n  selector: ${SW_STORAGE:h2}\n  elasticsearch:\n    namespace: ${SW_NAMESPACE:\"\"}\n    clusterNodes: ${SW_STORAGE_ES_CLUSTER_NODES:localhost:9200}\n    protocol: ${SW_STORAGE_ES_HTTP_PROTOCOL:\"http\"}\n    connectTimeout: ${SW_STORAGE_ES_CONNECT_TIMEOUT:3000}\n    socketTimeout: ${SW_STORAGE_ES_SOCKET_TIMEOUT:30000}\n    responseTimeout: ${SW_STORAGE_ES_RESPONSE_TIMEOUT:15000}\n    numHttpClientThread: ${SW_STORAGE_ES_NUM_HTTP_CLIENT_THREAD:0}\n    user: ${SW_ES_USER:\"\"}\n    password: ${SW_ES_PASSWORD:\"\"}\n    trustStorePath: ${SW_STORAGE_ES_SSL_JKS_PATH:\"\"}\n    trustStorePass: ${SW_STORAGE_ES_SSL_JKS_PASS:\"\"}\n    secretsManagementFile: ${SW_ES_SECRETS_MANAGEMENT_FILE:\"\"} # Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.\n    ......\n```\n\n配置文件的形式是${AAAA:BBB}，其中 AAAA是需要配置的环境变量 BBB是默认配置\n\n可以看到，skywalking默认的存储方式是基于java的轻量级数据库h2（所以不配也可以run起来）\n\n下面关于elasticsearch的设置 即通过SW_NAMESPACE， SW_STORAGE_ES_CLUSTER_NODES，SW_STORAGE_ES_HTTP_PROTOCOL等环境变量配置\n\n由于测试环境本机装有es 地址是localhost:9200，所以只需简单配置SW_STORAGE环境变量 使skywalking的存储方式变为ES即可\n\n```shell\nexport SW_STORAGE=elasticsearch\n```\n\n\n\n配置文件中还有一些skywalking启动的默认配置\n\n```yaml\n default:\n    # Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate\n    # Receiver: Receive agent data, Level 1 aggregate\n    # Aggregator: Level 2 aggregate\n    role: ${SW_CORE_ROLE:Mixed} # Mixed/Receiver/Aggregator\n    restHost: ${SW_CORE_REST_HOST:0.0.0.0}\n    restPort: ${SW_CORE_REST_PORT:12800}\n    restContextPath: ${SW_CORE_REST_CONTEXT_PATH:/}\n    restAcceptQueueSize: ${SW_CORE_REST_QUEUE_SIZE:0}\n    httpMaxRequestHeaderSize: ${SW_CORE_HTTP_MAX_REQUEST_HEADER_SIZE:8192}\n    gRPCHost: ${SW_CORE_GRPC_HOST:0.0.0.0}\n    gRPCPort: ${SW_CORE_GRPC_PORT:11800}\n    maxConcurrentCallsPerConnection: ${SW_CORE_GRPC_MAX_CONCURRENT_CALL:0}\n    maxMessageSize: ${SW_CORE_GRPC_MAX_MESSAGE_SIZE:0}\n    gRPCThreadPoolQueueSize: ${SW_CORE_GRPC_POOL_QUEUE_SIZE:-1}\n    gRPCThreadPoolSize: ${SW_CORE_GRPC_THREAD_POOL_SIZE:-1}\n    gRPCSslEnabled: ${SW_CORE_GRPC_SSL_ENABLED:false\n    gRPCSslKeyPath: ${SW_CORE_GRPC_SSL_KEY_PATH:\"\"}\n    gRPCSslCertChainPath: ${SW_CORE_GRPC_SSL_CERT_CHAIN_PATH:\"\"}\n    gRPCSslTrustedCAPath: ${SW_CORE_GRPC_SSL_TRUSTED_CA_PATH:\"\"}\n```\n\n如果使用grpc上报方式 关注 SW_CORE_GRPC_HOST和SW_CORE_GRPC_PORT 这是集成的时候的上报地址，如果需要http方式上报则需关注SW_CORE_REST_HOST和SW_CORE_REST_PORT\n\n同理 在skywalking根目录下有个webapp目录 里面同样有个application.yml 和UI服务相关的配置在里面 容量不大 可以下来自行关注一下\n\n#### 4.启动apm服务&UI界面\n\n接下来进入 bin目录，执行启动命令\n\n```shell\nsh oapService.sh #启动apm服务\nsh webappService.sh #启动UI界面\n```\n\n下一步进入根目录下log文件 关注apm服务端和webapp有无启动错误日志，如果正常 那么恭喜你安装成功\n\n在浏览器打开http://localhost:8080/就可以看到skywalking的UI界面\n\n![image-20230601170917386](/Users/zhangshiyu/Library/Application Support/typora-user-images/image-20230601170917386.png)\n\n### 二、服务端接入（go-kit为例）\n\n#### 1.名词解释\n\n##### 1.span\n\n各业务端在进行链路追踪的时候可以创建span 这样在UI界面上就会显示由一组或者多组span组成的span树 用来监控一条链路的行为\n\n在skywalking中 业务端可以创建的span主要有三种：\n\n- EntrySpan\n\n```go\nfunc (t *Tracer) CreateEntrySpan(ctx context.Context, operationName string, extractor propagation.Extractor) (s Span, nCtx context.Context, err error)\n```\n\n使用这个方法 创建的是 Entry Span，代表的是入站操作，也就是服务接收到的请求。比如说，一个 HTTP 请求到达你的服务，并开始处理这个请求，那么就应该在这时创建一个 Entry Span。\n\n- LocalSpan\n\n\n\n","source":"_posts/SkyWalking安装部署与集成.md","raw":"---\ntitle: SkyWalking安装部署与集成\ndate: 2023-07-03 17:04:35\ntags: [分布式链路追踪,skywalking,golang]\n---\n### 一、安装部署\n\n#### 1.官网下载安装包\n\nhttps://skywalking.apache.org/downloads/\n\n![image-20230601161536483](/Users/zhangshiyu/Library/Application Support/typora-user-images/image-20230601161536483.png)\n\n#### 2.下载tar包，解压\n\n```shell\ntar -zxvf apache-skywalking-apm-9.4.0.tar.gz\n```\n\n解压后文件目录为\n\n![image-20230601162235270](/Users/zhangshiyu/Library/Application Support/typora-user-images/image-20230601162235270.png)\n\n\n\n**Notice：！！！** skywalking运行依赖java的JDK11及以上版本 如果本机的java版本在11以下 先升级java版本到11以上\n\n通过以下命令确定java版本\n\n```shell\njava -version\n```\n\n#### 3.对服务进行配置（可以不配 先run起来）\n\n进入config目录 找到application.yml\n\n```shell\nvim application.yml\n```\n\n打开配置文件，找到如下段落\n\n```yaml\n...\nstorage:\n  selector: ${SW_STORAGE:h2}\n  elasticsearch:\n    namespace: ${SW_NAMESPACE:\"\"}\n    clusterNodes: ${SW_STORAGE_ES_CLUSTER_NODES:localhost:9200}\n    protocol: ${SW_STORAGE_ES_HTTP_PROTOCOL:\"http\"}\n    connectTimeout: ${SW_STORAGE_ES_CONNECT_TIMEOUT:3000}\n    socketTimeout: ${SW_STORAGE_ES_SOCKET_TIMEOUT:30000}\n    responseTimeout: ${SW_STORAGE_ES_RESPONSE_TIMEOUT:15000}\n    numHttpClientThread: ${SW_STORAGE_ES_NUM_HTTP_CLIENT_THREAD:0}\n    user: ${SW_ES_USER:\"\"}\n    password: ${SW_ES_PASSWORD:\"\"}\n    trustStorePath: ${SW_STORAGE_ES_SSL_JKS_PATH:\"\"}\n    trustStorePass: ${SW_STORAGE_ES_SSL_JKS_PASS:\"\"}\n    secretsManagementFile: ${SW_ES_SECRETS_MANAGEMENT_FILE:\"\"} # Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.\n    ......\n```\n\n配置文件的形式是${AAAA:BBB}，其中 AAAA是需要配置的环境变量 BBB是默认配置\n\n可以看到，skywalking默认的存储方式是基于java的轻量级数据库h2（所以不配也可以run起来）\n\n下面关于elasticsearch的设置 即通过SW_NAMESPACE， SW_STORAGE_ES_CLUSTER_NODES，SW_STORAGE_ES_HTTP_PROTOCOL等环境变量配置\n\n由于测试环境本机装有es 地址是localhost:9200，所以只需简单配置SW_STORAGE环境变量 使skywalking的存储方式变为ES即可\n\n```shell\nexport SW_STORAGE=elasticsearch\n```\n\n\n\n配置文件中还有一些skywalking启动的默认配置\n\n```yaml\n default:\n    # Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate\n    # Receiver: Receive agent data, Level 1 aggregate\n    # Aggregator: Level 2 aggregate\n    role: ${SW_CORE_ROLE:Mixed} # Mixed/Receiver/Aggregator\n    restHost: ${SW_CORE_REST_HOST:0.0.0.0}\n    restPort: ${SW_CORE_REST_PORT:12800}\n    restContextPath: ${SW_CORE_REST_CONTEXT_PATH:/}\n    restAcceptQueueSize: ${SW_CORE_REST_QUEUE_SIZE:0}\n    httpMaxRequestHeaderSize: ${SW_CORE_HTTP_MAX_REQUEST_HEADER_SIZE:8192}\n    gRPCHost: ${SW_CORE_GRPC_HOST:0.0.0.0}\n    gRPCPort: ${SW_CORE_GRPC_PORT:11800}\n    maxConcurrentCallsPerConnection: ${SW_CORE_GRPC_MAX_CONCURRENT_CALL:0}\n    maxMessageSize: ${SW_CORE_GRPC_MAX_MESSAGE_SIZE:0}\n    gRPCThreadPoolQueueSize: ${SW_CORE_GRPC_POOL_QUEUE_SIZE:-1}\n    gRPCThreadPoolSize: ${SW_CORE_GRPC_THREAD_POOL_SIZE:-1}\n    gRPCSslEnabled: ${SW_CORE_GRPC_SSL_ENABLED:false\n    gRPCSslKeyPath: ${SW_CORE_GRPC_SSL_KEY_PATH:\"\"}\n    gRPCSslCertChainPath: ${SW_CORE_GRPC_SSL_CERT_CHAIN_PATH:\"\"}\n    gRPCSslTrustedCAPath: ${SW_CORE_GRPC_SSL_TRUSTED_CA_PATH:\"\"}\n```\n\n如果使用grpc上报方式 关注 SW_CORE_GRPC_HOST和SW_CORE_GRPC_PORT 这是集成的时候的上报地址，如果需要http方式上报则需关注SW_CORE_REST_HOST和SW_CORE_REST_PORT\n\n同理 在skywalking根目录下有个webapp目录 里面同样有个application.yml 和UI服务相关的配置在里面 容量不大 可以下来自行关注一下\n\n#### 4.启动apm服务&UI界面\n\n接下来进入 bin目录，执行启动命令\n\n```shell\nsh oapService.sh #启动apm服务\nsh webappService.sh #启动UI界面\n```\n\n下一步进入根目录下log文件 关注apm服务端和webapp有无启动错误日志，如果正常 那么恭喜你安装成功\n\n在浏览器打开http://localhost:8080/就可以看到skywalking的UI界面\n\n![image-20230601170917386](/Users/zhangshiyu/Library/Application Support/typora-user-images/image-20230601170917386.png)\n\n### 二、服务端接入（go-kit为例）\n\n#### 1.名词解释\n\n##### 1.span\n\n各业务端在进行链路追踪的时候可以创建span 这样在UI界面上就会显示由一组或者多组span组成的span树 用来监控一条链路的行为\n\n在skywalking中 业务端可以创建的span主要有三种：\n\n- EntrySpan\n\n```go\nfunc (t *Tracer) CreateEntrySpan(ctx context.Context, operationName string, extractor propagation.Extractor) (s Span, nCtx context.Context, err error)\n```\n\n使用这个方法 创建的是 Entry Span，代表的是入站操作，也就是服务接收到的请求。比如说，一个 HTTP 请求到达你的服务，并开始处理这个请求，那么就应该在这时创建一个 Entry Span。\n\n- LocalSpan\n\n\n\n","slug":"SkyWalking安装部署与集成","published":1,"updated":"2023-07-03T09:22:08.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljmpiaaa0003iqc96cho5h80","content":"<h3 id=\"一、安装部署\"><a href=\"#一、安装部署\" class=\"headerlink\" title=\"一、安装部署\"></a>一、安装部署</h3><h4 id=\"1-官网下载安装包\"><a href=\"#1-官网下载安装包\" class=\"headerlink\" title=\"1.官网下载安装包\"></a>1.官网下载安装包</h4><p><a href=\"https://skywalking.apache.org/downloads/\">https://skywalking.apache.org/downloads/</a></p>\n<p>![image-20230601161536483](&#x2F;Users&#x2F;zhangshiyu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230601161536483.png)</p>\n<h4 id=\"2-下载tar包，解压\"><a href=\"#2-下载tar包，解压\" class=\"headerlink\" title=\"2.下载tar包，解压\"></a>2.下载tar包，解压</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-skywalking-apm-9.4.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压后文件目录为</p>\n<p>![image-20230601162235270](&#x2F;Users&#x2F;zhangshiyu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230601162235270.png)</p>\n<p><strong>Notice：！！！</strong> skywalking运行依赖java的JDK11及以上版本 如果本机的java版本在11以下 先升级java版本到11以上</p>\n<p>通过以下命令确定java版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-对服务进行配置（可以不配-先run起来）\"><a href=\"#3-对服务进行配置（可以不配-先run起来）\" class=\"headerlink\" title=\"3.对服务进行配置（可以不配 先run起来）\"></a>3.对服务进行配置（可以不配 先run起来）</h4><p>进入config目录 找到application.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim application.yml</span><br></pre></td></tr></table></figure>\n\n<p>打开配置文件，找到如下段落</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"string\">$&#123;SW_STORAGE:h2&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;SW_NAMESPACE:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">clusterNodes:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">connectTimeout:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_CONNECT_TIMEOUT:3000&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">socketTimeout:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_SOCKET_TIMEOUT:30000&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">responseTimeout:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_RESPONSE_TIMEOUT:15000&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">numHttpClientThread:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_NUM_HTTP_CLIENT_THREAD:0&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">$&#123;SW_ES_USER:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">$&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">trustStorePath:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_SSL_JKS_PATH:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">trustStorePass:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">secretsManagementFile:</span> <span class=\"string\">$&#123;SW_ES_SECRETS_MANAGEMENT_FILE:&quot;&quot;&#125;</span> <span class=\"comment\"># Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.</span></span><br><span class=\"line\">    <span class=\"string\">......</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件的形式是${AAAA:BBB}，其中 AAAA是需要配置的环境变量 BBB是默认配置</p>\n<p>可以看到，skywalking默认的存储方式是基于java的轻量级数据库h2（所以不配也可以run起来）</p>\n<p>下面关于elasticsearch的设置 即通过SW_NAMESPACE， SW_STORAGE_ES_CLUSTER_NODES，SW_STORAGE_ES_HTTP_PROTOCOL等环境变量配置</p>\n<p>由于测试环境本机装有es 地址是localhost:9200，所以只需简单配置SW_STORAGE环境变量 使skywalking的存储方式变为ES即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export SW_STORAGE=elasticsearch</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置文件中还有一些skywalking启动的默认配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">   <span class=\"comment\"># Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate</span></span><br><span class=\"line\">   <span class=\"comment\"># Receiver: Receive agent data, Level 1 aggregate</span></span><br><span class=\"line\">   <span class=\"comment\"># Aggregator: Level 2 aggregate</span></span><br><span class=\"line\">   <span class=\"attr\">role:</span> <span class=\"string\">$&#123;SW_CORE_ROLE:Mixed&#125;</span> <span class=\"comment\"># Mixed/Receiver/Aggregator</span></span><br><span class=\"line\">   <span class=\"attr\">restHost:</span> <span class=\"string\">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">restPort:</span> <span class=\"string\">$&#123;SW_CORE_REST_PORT:12800&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">restContextPath:</span> <span class=\"string\">$&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">restAcceptQueueSize:</span> <span class=\"string\">$&#123;SW_CORE_REST_QUEUE_SIZE:0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">httpMaxRequestHeaderSize:</span> <span class=\"string\">$&#123;SW_CORE_HTTP_MAX_REQUEST_HEADER_SIZE:8192&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCHost:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCPort:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_PORT:11800&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">maxConcurrentCallsPerConnection:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_MAX_CONCURRENT_CALL:0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">maxMessageSize:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_MAX_MESSAGE_SIZE:0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCThreadPoolQueueSize:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_POOL_QUEUE_SIZE:-1&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCThreadPoolSize:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_THREAD_POOL_SIZE:-1&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCSslEnabled:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_SSL_ENABLED:false</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCSslKeyPath:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_SSL_KEY_PATH:&quot;&quot;&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCSslCertChainPath:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_SSL_CERT_CHAIN_PATH:&quot;&quot;&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCSslTrustedCAPath:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_SSL_TRUSTED_CA_PATH:&quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用grpc上报方式 关注 SW_CORE_GRPC_HOST和SW_CORE_GRPC_PORT 这是集成的时候的上报地址，如果需要http方式上报则需关注SW_CORE_REST_HOST和SW_CORE_REST_PORT</p>\n<p>同理 在skywalking根目录下有个webapp目录 里面同样有个application.yml 和UI服务相关的配置在里面 容量不大 可以下来自行关注一下</p>\n<h4 id=\"4-启动apm服务-amp-UI界面\"><a href=\"#4-启动apm服务-amp-UI界面\" class=\"headerlink\" title=\"4.启动apm服务&amp;UI界面\"></a>4.启动apm服务&amp;UI界面</h4><p>接下来进入 bin目录，执行启动命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh oapService.sh #启动apm服务</span><br><span class=\"line\">sh webappService.sh #启动UI界面</span><br></pre></td></tr></table></figure>\n\n<p>下一步进入根目录下log文件 关注apm服务端和webapp有无启动错误日志，如果正常 那么恭喜你安装成功</p>\n<p>在浏览器打开<a href=\"http://localhost:8080/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0skywalking%E7%9A%84UI%E7%95%8C%E9%9D%A2\">http://localhost:8080/就可以看到skywalking的UI界面</a></p>\n<p>![image-20230601170917386](&#x2F;Users&#x2F;zhangshiyu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230601170917386.png)</p>\n<h3 id=\"二、服务端接入（go-kit为例）\"><a href=\"#二、服务端接入（go-kit为例）\" class=\"headerlink\" title=\"二、服务端接入（go-kit为例）\"></a>二、服务端接入（go-kit为例）</h3><h4 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1.名词解释\"></a>1.名词解释</h4><h5 id=\"1-span\"><a href=\"#1-span\" class=\"headerlink\" title=\"1.span\"></a>1.span</h5><p>各业务端在进行链路追踪的时候可以创建span 这样在UI界面上就会显示由一组或者多组span组成的span树 用来监控一条链路的行为</p>\n<p>在skywalking中 业务端可以创建的span主要有三种：</p>\n<ul>\n<li>EntrySpan</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Tracer)</span></span> CreateEntrySpan(ctx context.Context, operationName <span class=\"type\">string</span>, extractor propagation.Extractor) (s Span, nCtx context.Context, err <span class=\"type\">error</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用这个方法 创建的是 Entry Span，代表的是入站操作，也就是服务接收到的请求。比如说，一个 HTTP 请求到达你的服务，并开始处理这个请求，那么就应该在这时创建一个 Entry Span。</p>\n<ul>\n<li>LocalSpan</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、安装部署\"><a href=\"#一、安装部署\" class=\"headerlink\" title=\"一、安装部署\"></a>一、安装部署</h3><h4 id=\"1-官网下载安装包\"><a href=\"#1-官网下载安装包\" class=\"headerlink\" title=\"1.官网下载安装包\"></a>1.官网下载安装包</h4><p><a href=\"https://skywalking.apache.org/downloads/\">https://skywalking.apache.org/downloads/</a></p>\n<p>![image-20230601161536483](&#x2F;Users&#x2F;zhangshiyu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230601161536483.png)</p>\n<h4 id=\"2-下载tar包，解压\"><a href=\"#2-下载tar包，解压\" class=\"headerlink\" title=\"2.下载tar包，解压\"></a>2.下载tar包，解压</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-skywalking-apm-9.4.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压后文件目录为</p>\n<p>![image-20230601162235270](&#x2F;Users&#x2F;zhangshiyu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230601162235270.png)</p>\n<p><strong>Notice：！！！</strong> skywalking运行依赖java的JDK11及以上版本 如果本机的java版本在11以下 先升级java版本到11以上</p>\n<p>通过以下命令确定java版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-对服务进行配置（可以不配-先run起来）\"><a href=\"#3-对服务进行配置（可以不配-先run起来）\" class=\"headerlink\" title=\"3.对服务进行配置（可以不配 先run起来）\"></a>3.对服务进行配置（可以不配 先run起来）</h4><p>进入config目录 找到application.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim application.yml</span><br></pre></td></tr></table></figure>\n\n<p>打开配置文件，找到如下段落</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"string\">$&#123;SW_STORAGE:h2&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">$&#123;SW_NAMESPACE:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">clusterNodes:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">connectTimeout:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_CONNECT_TIMEOUT:3000&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">socketTimeout:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_SOCKET_TIMEOUT:30000&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">responseTimeout:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_RESPONSE_TIMEOUT:15000&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">numHttpClientThread:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_NUM_HTTP_CLIENT_THREAD:0&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">$&#123;SW_ES_USER:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">$&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">trustStorePath:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_SSL_JKS_PATH:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">trustStorePass:</span> <span class=\"string\">$&#123;SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">secretsManagementFile:</span> <span class=\"string\">$&#123;SW_ES_SECRETS_MANAGEMENT_FILE:&quot;&quot;&#125;</span> <span class=\"comment\"># Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.</span></span><br><span class=\"line\">    <span class=\"string\">......</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件的形式是${AAAA:BBB}，其中 AAAA是需要配置的环境变量 BBB是默认配置</p>\n<p>可以看到，skywalking默认的存储方式是基于java的轻量级数据库h2（所以不配也可以run起来）</p>\n<p>下面关于elasticsearch的设置 即通过SW_NAMESPACE， SW_STORAGE_ES_CLUSTER_NODES，SW_STORAGE_ES_HTTP_PROTOCOL等环境变量配置</p>\n<p>由于测试环境本机装有es 地址是localhost:9200，所以只需简单配置SW_STORAGE环境变量 使skywalking的存储方式变为ES即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export SW_STORAGE=elasticsearch</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置文件中还有一些skywalking启动的默认配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">   <span class=\"comment\"># Mixed: Receive agent data, Level 1 aggregate, Level 2 aggregate</span></span><br><span class=\"line\">   <span class=\"comment\"># Receiver: Receive agent data, Level 1 aggregate</span></span><br><span class=\"line\">   <span class=\"comment\"># Aggregator: Level 2 aggregate</span></span><br><span class=\"line\">   <span class=\"attr\">role:</span> <span class=\"string\">$&#123;SW_CORE_ROLE:Mixed&#125;</span> <span class=\"comment\"># Mixed/Receiver/Aggregator</span></span><br><span class=\"line\">   <span class=\"attr\">restHost:</span> <span class=\"string\">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">restPort:</span> <span class=\"string\">$&#123;SW_CORE_REST_PORT:12800&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">restContextPath:</span> <span class=\"string\">$&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">restAcceptQueueSize:</span> <span class=\"string\">$&#123;SW_CORE_REST_QUEUE_SIZE:0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">httpMaxRequestHeaderSize:</span> <span class=\"string\">$&#123;SW_CORE_HTTP_MAX_REQUEST_HEADER_SIZE:8192&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCHost:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCPort:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_PORT:11800&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">maxConcurrentCallsPerConnection:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_MAX_CONCURRENT_CALL:0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">maxMessageSize:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_MAX_MESSAGE_SIZE:0&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCThreadPoolQueueSize:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_POOL_QUEUE_SIZE:-1&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCThreadPoolSize:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_THREAD_POOL_SIZE:-1&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCSslEnabled:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_SSL_ENABLED:false</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCSslKeyPath:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_SSL_KEY_PATH:&quot;&quot;&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCSslCertChainPath:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_SSL_CERT_CHAIN_PATH:&quot;&quot;&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">gRPCSslTrustedCAPath:</span> <span class=\"string\">$&#123;SW_CORE_GRPC_SSL_TRUSTED_CA_PATH:&quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用grpc上报方式 关注 SW_CORE_GRPC_HOST和SW_CORE_GRPC_PORT 这是集成的时候的上报地址，如果需要http方式上报则需关注SW_CORE_REST_HOST和SW_CORE_REST_PORT</p>\n<p>同理 在skywalking根目录下有个webapp目录 里面同样有个application.yml 和UI服务相关的配置在里面 容量不大 可以下来自行关注一下</p>\n<h4 id=\"4-启动apm服务-amp-UI界面\"><a href=\"#4-启动apm服务-amp-UI界面\" class=\"headerlink\" title=\"4.启动apm服务&amp;UI界面\"></a>4.启动apm服务&amp;UI界面</h4><p>接下来进入 bin目录，执行启动命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh oapService.sh #启动apm服务</span><br><span class=\"line\">sh webappService.sh #启动UI界面</span><br></pre></td></tr></table></figure>\n\n<p>下一步进入根目录下log文件 关注apm服务端和webapp有无启动错误日志，如果正常 那么恭喜你安装成功</p>\n<p>在浏览器打开<a href=\"http://localhost:8080/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0skywalking%E7%9A%84UI%E7%95%8C%E9%9D%A2\">http://localhost:8080/就可以看到skywalking的UI界面</a></p>\n<p>![image-20230601170917386](&#x2F;Users&#x2F;zhangshiyu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230601170917386.png)</p>\n<h3 id=\"二、服务端接入（go-kit为例）\"><a href=\"#二、服务端接入（go-kit为例）\" class=\"headerlink\" title=\"二、服务端接入（go-kit为例）\"></a>二、服务端接入（go-kit为例）</h3><h4 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1.名词解释\"></a>1.名词解释</h4><h5 id=\"1-span\"><a href=\"#1-span\" class=\"headerlink\" title=\"1.span\"></a>1.span</h5><p>各业务端在进行链路追踪的时候可以创建span 这样在UI界面上就会显示由一组或者多组span组成的span树 用来监控一条链路的行为</p>\n<p>在skywalking中 业务端可以创建的span主要有三种：</p>\n<ul>\n<li>EntrySpan</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Tracer)</span></span> CreateEntrySpan(ctx context.Context, operationName <span class=\"type\">string</span>, extractor propagation.Extractor) (s Span, nCtx context.Context, err <span class=\"type\">error</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用这个方法 创建的是 Entry Span，代表的是入站操作，也就是服务接收到的请求。比如说，一个 HTTP 请求到达你的服务，并开始处理这个请求，那么就应该在这时创建一个 Entry Span。</p>\n<ul>\n<li>LocalSpan</li>\n</ul>\n"},{"title":"ubuntu部署单节点Kubernetes1.27","date":"2023-06-28T07:44:21.000Z","_content":"# ubuntu部署单节点Kubernetes1.27\n\n系统：Ubuntu22.04\n\n### 1.准备工作\n\n```shell\ncurl -fsSL https://get.docker.com | sudo sh\n# 使用 aliyun 的 k8s 源安装 kubeadm 和相关命令行工具\napt-get update && apt-get install -y apt-transport-https\ncurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -\necho \"deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\" > /etc/apt/sources.list.d/kubernetes.list\napt-get update\napt-get install -y kubelet kubeadm kubectl\nsystemctl enable kubelet\n# 修改 docker 的 cgroup driver 选项为 systemd，与 k8s 保持一致，并修改 registry-mirror 加速下载\nvi /etc/docker/daemon.json\n    {\n        \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n        \"registry-mirrors\": [\"https://registry.docker-cn.com\", \"https://docker.mirrors.ustc.edu.cn\"]\n    }\nsystemctl restart docker\n```\n\n### 2.使用 kubeadm init k8s\n\n```shell\n# 使用阿里云上提供的 k8s 镜像（这里指定的网络与后续使用的网络插件的配置保持一致）\nkubeadm init --image-repository registry.aliyuncs.com/google_containers \\\n    --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16\n```\n\n#### 2.1 问题修复（如果上一步执行正常无报错 则跳过）\n\n```shell\ncontainer runtime is not running :CRI v1 runtime API is not implemented for endpoint \\\"unix:///var/run/containerd/containerd.sock\\\": rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService\n```\n\n报错的原因是ubuntu22.04默认预装的是旧版本的containerd.io 需要下载二进制包手动替换：\n\n以下是简单步骤（可以照做）具体详细的文档参见https://github.com/containerd/containerd/blob/main/docs/getting-started.md\n\n```shell\n#下载containerd二进制包\nwget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz\n#将其解压缩到/usr/local下:\ntar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz\n#接下来从runc的github上单独下载安装runc，该二进制文件是静态构建的，并且应该适用于任何Linux发行版。\nwget https://github.com/opencontainers/runc/releases/download/v1.1.7/runc.amd64\ninstall -m 755 runc.amd64 /usr/local/sbin/runc\n#生成containerd的配置文件\nmkdir -p /etc/containerd\ncontainerd config default > /etc/containerd/config.toml\n```\n\n根据官方文档指导 需要将`systemd` 设置为 cgroup 驱动对于使用systemd作为init system的Linux的发行版，使用systemd作为容器的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定 详见https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/\n\n修改刚刚生成的配置文件\n\n```shell\nvim /etc/containerd/config.toml\n```\n\n```toml\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n  ...\n  [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n    SystemdCgroup = true\n```\n\n国内环境需要替换k8s官方镜像仓库为阿里云仓库\n\n还是刚刚的配置文件：\n\n```toml\n[plugins.\"io.containerd.grpc.v1.cri\"]\n  ...\n  # sandbox_image = \"registry.k8s.io/pause:3.8\"\n  sandbox_image = \"registry.aliyuncs.com/google_containers/pause:3.9\"\n```\n\n为了通过systemd启动containerd，请还需要从`https://raw.githubusercontent.com/containerd/containerd/main/containerd.service`下载`containerd.service`单元文件，并将其放置在` /etc/systemd/system/containerd.service`中。 配置containerd开机启动，并启动containerd，执行以下命令:\n\n```shell\ncd /etc/systemd/system\nwget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\nsystemctl daemon-reload\nsystemctl enable containerd --now \n```\n\n下载安装crictl工具（选装，ubuntu22.04自带）:\n\n```shell\nwget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.27.0/crictl-v1.27.0-linux-amd64.tar.gz\ntar -zxvf crictl-v1.27.0-linux-amd64.tar.gz\ninstall -m 755 crictl /usr/local/bin/crictl\n```\n\n使用crictl测试一下，确保可以打印出版本信息并且没有错误信息输出:\n\n```shell\ncrictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version\n\nVersion:  0.1.0\nRuntimeName:  containerd\nRuntimeVersion:  v1.7.2\nRuntimeApiVersion:  v1\n```\n\nnotice：这里是第二个坑，执行命令返回 \n\n```shell\ncrictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version\nFATA[0000] validate service connection: CRI v1 runtime API is not implemented for endpoint \"unix:///run/containerd/containerd.sock\": rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService\n```\n\n！！（上一步没问题的跳过）原因是系统预装的containerd还在运行，需要删除掉后重启 \n\n```shell\napt remove containerd.io\nsystemctl daemon-reload\nsystemctl enable containerd --now\nsystemctl status containerd\n```\n\n此时再次运行检查命令，返回正常\n\n```shell\ncrictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version\n```\n\n启动kubelet\n\n```shell\nsystemctl enable kubelet.service\n```\n\n再次运行\n\n```shell\n kubeadm init --image-repository registry.aliyuncs.com/google_containers \\\n    --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16\n```\n\n#### 2.2 完成安装\n\n全部执行完成后根据提示执行下述命令\n\n```shell\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\t\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\n#单节点集群跳过这步\nkubeadm join 172.16.3.169:6443 --token z4o3n1.l64vso6rqo8pobmp \\\n\t--discovery-token-ca-cert-hash sha256:124049c1f0335b2ed1314262710e60ac4d344403bd6375d2c66ea7e3013da99c\n```\n\n执行 kubectl get pods -A\n\n```shell\nNAMESPACE     NAME                                  READY   STATUS    RESTARTS   AGE\nkube-system   coredns-7bdc4cb885-w6vrn              0/1     Pending   0          5s\nkube-system   coredns-7bdc4cb885-wx2nr              0/1     Pending   0          5s\nkube-system   etcd-***-****-**                      1/1     Running   0          5s\nkube-system   kube-apiserver-***-****-**            1/1     Running   0          5s\nkube-system   kube-controller-manager-***-****-**   1/1     Running   0          5s\nkube-system   kube-proxy-lbcbk                      1/1     Running   0          5s\nkube-system   kube-scheduler-***-****-**            1/1     Running   0          5s\n```\n\n大功告成\n\n### 3.安装包管理器helm 3\n\nHelm是Kubernetes的包管理器，后续流程也将使用Helm安装Kubernetes的常用组件。 这里先在master节点node1上安装helm。\n\n```shell\nwget https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz\ntar -zxvf helm-v3.12.0-linux-amd64.tar.gz\nmv linux-amd64/helm  /usr/local/bin/\n```\n\n执行 helm list 确认没有错误输出\n","source":"_posts/ubuntu部署单节点Kubernetes1.27.md","raw":"---\ntitle: ubuntu部署单节点Kubernetes1.27\ndate: 2023-06-28 15:44:21\ntags: [k8s,linux]\n---\n# ubuntu部署单节点Kubernetes1.27\n\n系统：Ubuntu22.04\n\n### 1.准备工作\n\n```shell\ncurl -fsSL https://get.docker.com | sudo sh\n# 使用 aliyun 的 k8s 源安装 kubeadm 和相关命令行工具\napt-get update && apt-get install -y apt-transport-https\ncurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -\necho \"deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\" > /etc/apt/sources.list.d/kubernetes.list\napt-get update\napt-get install -y kubelet kubeadm kubectl\nsystemctl enable kubelet\n# 修改 docker 的 cgroup driver 选项为 systemd，与 k8s 保持一致，并修改 registry-mirror 加速下载\nvi /etc/docker/daemon.json\n    {\n        \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n        \"registry-mirrors\": [\"https://registry.docker-cn.com\", \"https://docker.mirrors.ustc.edu.cn\"]\n    }\nsystemctl restart docker\n```\n\n### 2.使用 kubeadm init k8s\n\n```shell\n# 使用阿里云上提供的 k8s 镜像（这里指定的网络与后续使用的网络插件的配置保持一致）\nkubeadm init --image-repository registry.aliyuncs.com/google_containers \\\n    --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16\n```\n\n#### 2.1 问题修复（如果上一步执行正常无报错 则跳过）\n\n```shell\ncontainer runtime is not running :CRI v1 runtime API is not implemented for endpoint \\\"unix:///var/run/containerd/containerd.sock\\\": rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService\n```\n\n报错的原因是ubuntu22.04默认预装的是旧版本的containerd.io 需要下载二进制包手动替换：\n\n以下是简单步骤（可以照做）具体详细的文档参见https://github.com/containerd/containerd/blob/main/docs/getting-started.md\n\n```shell\n#下载containerd二进制包\nwget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz\n#将其解压缩到/usr/local下:\ntar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz\n#接下来从runc的github上单独下载安装runc，该二进制文件是静态构建的，并且应该适用于任何Linux发行版。\nwget https://github.com/opencontainers/runc/releases/download/v1.1.7/runc.amd64\ninstall -m 755 runc.amd64 /usr/local/sbin/runc\n#生成containerd的配置文件\nmkdir -p /etc/containerd\ncontainerd config default > /etc/containerd/config.toml\n```\n\n根据官方文档指导 需要将`systemd` 设置为 cgroup 驱动对于使用systemd作为init system的Linux的发行版，使用systemd作为容器的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定 详见https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/\n\n修改刚刚生成的配置文件\n\n```shell\nvim /etc/containerd/config.toml\n```\n\n```toml\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n  ...\n  [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n    SystemdCgroup = true\n```\n\n国内环境需要替换k8s官方镜像仓库为阿里云仓库\n\n还是刚刚的配置文件：\n\n```toml\n[plugins.\"io.containerd.grpc.v1.cri\"]\n  ...\n  # sandbox_image = \"registry.k8s.io/pause:3.8\"\n  sandbox_image = \"registry.aliyuncs.com/google_containers/pause:3.9\"\n```\n\n为了通过systemd启动containerd，请还需要从`https://raw.githubusercontent.com/containerd/containerd/main/containerd.service`下载`containerd.service`单元文件，并将其放置在` /etc/systemd/system/containerd.service`中。 配置containerd开机启动，并启动containerd，执行以下命令:\n\n```shell\ncd /etc/systemd/system\nwget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\nsystemctl daemon-reload\nsystemctl enable containerd --now \n```\n\n下载安装crictl工具（选装，ubuntu22.04自带）:\n\n```shell\nwget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.27.0/crictl-v1.27.0-linux-amd64.tar.gz\ntar -zxvf crictl-v1.27.0-linux-amd64.tar.gz\ninstall -m 755 crictl /usr/local/bin/crictl\n```\n\n使用crictl测试一下，确保可以打印出版本信息并且没有错误信息输出:\n\n```shell\ncrictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version\n\nVersion:  0.1.0\nRuntimeName:  containerd\nRuntimeVersion:  v1.7.2\nRuntimeApiVersion:  v1\n```\n\nnotice：这里是第二个坑，执行命令返回 \n\n```shell\ncrictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version\nFATA[0000] validate service connection: CRI v1 runtime API is not implemented for endpoint \"unix:///run/containerd/containerd.sock\": rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService\n```\n\n！！（上一步没问题的跳过）原因是系统预装的containerd还在运行，需要删除掉后重启 \n\n```shell\napt remove containerd.io\nsystemctl daemon-reload\nsystemctl enable containerd --now\nsystemctl status containerd\n```\n\n此时再次运行检查命令，返回正常\n\n```shell\ncrictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version\n```\n\n启动kubelet\n\n```shell\nsystemctl enable kubelet.service\n```\n\n再次运行\n\n```shell\n kubeadm init --image-repository registry.aliyuncs.com/google_containers \\\n    --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16\n```\n\n#### 2.2 完成安装\n\n全部执行完成后根据提示执行下述命令\n\n```shell\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\t\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\n#单节点集群跳过这步\nkubeadm join 172.16.3.169:6443 --token z4o3n1.l64vso6rqo8pobmp \\\n\t--discovery-token-ca-cert-hash sha256:124049c1f0335b2ed1314262710e60ac4d344403bd6375d2c66ea7e3013da99c\n```\n\n执行 kubectl get pods -A\n\n```shell\nNAMESPACE     NAME                                  READY   STATUS    RESTARTS   AGE\nkube-system   coredns-7bdc4cb885-w6vrn              0/1     Pending   0          5s\nkube-system   coredns-7bdc4cb885-wx2nr              0/1     Pending   0          5s\nkube-system   etcd-***-****-**                      1/1     Running   0          5s\nkube-system   kube-apiserver-***-****-**            1/1     Running   0          5s\nkube-system   kube-controller-manager-***-****-**   1/1     Running   0          5s\nkube-system   kube-proxy-lbcbk                      1/1     Running   0          5s\nkube-system   kube-scheduler-***-****-**            1/1     Running   0          5s\n```\n\n大功告成\n\n### 3.安装包管理器helm 3\n\nHelm是Kubernetes的包管理器，后续流程也将使用Helm安装Kubernetes的常用组件。 这里先在master节点node1上安装helm。\n\n```shell\nwget https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz\ntar -zxvf helm-v3.12.0-linux-amd64.tar.gz\nmv linux-amd64/helm  /usr/local/bin/\n```\n\n执行 helm list 确认没有错误输出\n","slug":"ubuntu部署单节点Kubernetes1.27","published":1,"updated":"2023-07-03T09:22:26.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljmpiaab0006iqc931a3guza","content":"<h1 id=\"ubuntu部署单节点Kubernetes1-27\"><a href=\"#ubuntu部署单节点Kubernetes1-27\" class=\"headerlink\" title=\"ubuntu部署单节点Kubernetes1.27\"></a>ubuntu部署单节点Kubernetes1.27</h1><p>系统：Ubuntu22.04</p>\n<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | sudo sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 aliyun 的 k8s 源安装 kubeadm 和相关命令行工具</span></span><br><span class=\"line\">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class=\"line\">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class=\"line\">echo &quot;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&quot; &gt; /etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y kubelet kubeadm kubectl</span><br><span class=\"line\">systemctl enable kubelet</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 docker 的 cgroup driver 选项为 systemd，与 k8s 保持一致，并修改 registry-mirror 加速下载</span></span><br><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">        &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用-kubeadm-init-k8s\"><a href=\"#2-使用-kubeadm-init-k8s\" class=\"headerlink\" title=\"2.使用 kubeadm init k8s\"></a>2.使用 kubeadm init k8s</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用阿里云上提供的 k8s 镜像（这里指定的网络与后续使用的网络插件的配置保持一致）</span></span><br><span class=\"line\">kubeadm init --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">    --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-问题修复（如果上一步执行正常无报错-则跳过）\"><a href=\"#2-1-问题修复（如果上一步执行正常无报错-则跳过）\" class=\"headerlink\" title=\"2.1 问题修复（如果上一步执行正常无报错 则跳过）\"></a>2.1 问题修复（如果上一步执行正常无报错 则跳过）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">container runtime is not running :CRI v1 runtime API is not implemented for endpoint \\&quot;unix:///var/run/containerd/containerd.sock\\&quot;: rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService</span><br></pre></td></tr></table></figure>\n\n<p>报错的原因是ubuntu22.04默认预装的是旧版本的containerd.io 需要下载二进制包手动替换：</p>\n<p>以下是简单步骤（可以照做）具体详细的文档参见<a href=\"https://github.com/containerd/containerd/blob/main/docs/getting-started.md\">https://github.com/containerd/containerd/blob/main/docs/getting-started.md</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下载containerd二进制包</span></span><br><span class=\"line\">wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将其解压缩到/usr/local下:</span></span><br><span class=\"line\">tar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">接下来从runc的github上单独下载安装runc，该二进制文件是静态构建的，并且应该适用于任何Linux发行版。</span></span><br><span class=\"line\">wget https://github.com/opencontainers/runc/releases/download/v1.1.7/runc.amd64</span><br><span class=\"line\">install -m 755 runc.amd64 /usr/local/sbin/runc</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">生成containerd的配置文件</span></span><br><span class=\"line\">mkdir -p /etc/containerd</span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n\n<p>根据官方文档指导 需要将<code>systemd</code> 设置为 cgroup 驱动对于使用systemd作为init system的Linux的发行版，使用systemd作为容器的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定 详见<a href=\"https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/\">https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/</a></p>\n<p>修改刚刚生成的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span></span><br><span class=\"line\">    <span class=\"attr\">SystemdCgroup</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>国内环境需要替换k8s官方镜像仓库为阿里云仓库</p>\n<p>还是刚刚的配置文件：</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\"># sandbox_image = &quot;registry.k8s.io/pause:3.8&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">sandbox_image</span> = <span class=\"string\">&quot;registry.aliyuncs.com/google_containers/pause:3.9&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>为了通过systemd启动containerd，请还需要从<code>https://raw.githubusercontent.com/containerd/containerd/main/containerd.service</code>下载<code>containerd.service</code>单元文件，并将其放置在<code> /etc/systemd/system/containerd.service</code>中。 配置containerd开机启动，并启动containerd，执行以下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/systemd/system</span><br><span class=\"line\">wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl enable containerd --now </span><br></pre></td></tr></table></figure>\n\n<p>下载安装crictl工具（选装，ubuntu22.04自带）:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.27.0/crictl-v1.27.0-linux-amd64.tar.gz</span><br><span class=\"line\">tar -zxvf crictl-v1.27.0-linux-amd64.tar.gz</span><br><span class=\"line\">install -m 755 crictl /usr/local/bin/crictl</span><br></pre></td></tr></table></figure>\n\n<p>使用crictl测试一下，确保可以打印出版本信息并且没有错误信息输出:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version</span><br><span class=\"line\"></span><br><span class=\"line\">Version:  0.1.0</span><br><span class=\"line\">RuntimeName:  containerd</span><br><span class=\"line\">RuntimeVersion:  v1.7.2</span><br><span class=\"line\">RuntimeApiVersion:  v1</span><br></pre></td></tr></table></figure>\n\n<p>notice：这里是第二个坑，执行命令返回 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version</span><br><span class=\"line\">FATA[0000] validate service connection: CRI v1 runtime API is not implemented for endpoint &quot;unix:///run/containerd/containerd.sock&quot;: rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService</span><br></pre></td></tr></table></figure>\n\n<p>！！（上一步没问题的跳过）原因是系统预装的containerd还在运行，需要删除掉后重启 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt remove containerd.io</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl enable containerd --now</span><br><span class=\"line\">systemctl status containerd</span><br></pre></td></tr></table></figure>\n\n<p>此时再次运行检查命令，返回正常</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version</span><br></pre></td></tr></table></figure>\n\n<p>启动kubelet</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable kubelet.service</span><br></pre></td></tr></table></figure>\n\n<p>再次运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">   --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-完成安装\"><a href=\"#2-2-完成安装\" class=\"headerlink\" title=\"2.2 完成安装\"></a>2.2 完成安装</h4><p>全部执行完成后根据提示执行下述命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\">\t</span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, if you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">单节点集群跳过这步</span></span><br><span class=\"line\">kubeadm join 172.16.3.169:6443 --token z4o3n1.l64vso6rqo8pobmp \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:124049c1f0335b2ed1314262710e60ac4d344403bd6375d2c66ea7e3013da99c</span><br></pre></td></tr></table></figure>\n\n<p>执行 kubectl get pods -A</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAMESPACE     NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system   coredns-7bdc4cb885-w6vrn              0/1     Pending   0          5s</span><br><span class=\"line\">kube-system   coredns-7bdc4cb885-wx2nr              0/1     Pending   0          5s</span><br><span class=\"line\">kube-system   etcd-***-****-**                      1/1     Running   0          5s</span><br><span class=\"line\">kube-system   kube-apiserver-***-****-**            1/1     Running   0          5s</span><br><span class=\"line\">kube-system   kube-controller-manager-***-****-**   1/1     Running   0          5s</span><br><span class=\"line\">kube-system   kube-proxy-lbcbk                      1/1     Running   0          5s</span><br><span class=\"line\">kube-system   kube-scheduler-***-****-**            1/1     Running   0          5s</span><br></pre></td></tr></table></figure>\n\n<p>大功告成</p>\n<h3 id=\"3-安装包管理器helm-3\"><a href=\"#3-安装包管理器helm-3\" class=\"headerlink\" title=\"3.安装包管理器helm 3\"></a>3.安装包管理器helm 3</h3><p>Helm是Kubernetes的包管理器，后续流程也将使用Helm安装Kubernetes的常用组件。 这里先在master节点node1上安装helm。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz</span><br><span class=\"line\">tar -zxvf helm-v3.12.0-linux-amd64.tar.gz</span><br><span class=\"line\">mv linux-amd64/helm  /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<p>执行 helm list 确认没有错误输出</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ubuntu部署单节点Kubernetes1-27\"><a href=\"#ubuntu部署单节点Kubernetes1-27\" class=\"headerlink\" title=\"ubuntu部署单节点Kubernetes1.27\"></a>ubuntu部署单节点Kubernetes1.27</h1><p>系统：Ubuntu22.04</p>\n<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | sudo sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 aliyun 的 k8s 源安装 kubeadm 和相关命令行工具</span></span><br><span class=\"line\">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class=\"line\">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class=\"line\">echo &quot;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&quot; &gt; /etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y kubelet kubeadm kubectl</span><br><span class=\"line\">systemctl enable kubelet</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 docker 的 cgroup driver 选项为 systemd，与 k8s 保持一致，并修改 registry-mirror 加速下载</span></span><br><span class=\"line\">vi /etc/docker/daemon.json</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">        &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用-kubeadm-init-k8s\"><a href=\"#2-使用-kubeadm-init-k8s\" class=\"headerlink\" title=\"2.使用 kubeadm init k8s\"></a>2.使用 kubeadm init k8s</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用阿里云上提供的 k8s 镜像（这里指定的网络与后续使用的网络插件的配置保持一致）</span></span><br><span class=\"line\">kubeadm init --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">    --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-问题修复（如果上一步执行正常无报错-则跳过）\"><a href=\"#2-1-问题修复（如果上一步执行正常无报错-则跳过）\" class=\"headerlink\" title=\"2.1 问题修复（如果上一步执行正常无报错 则跳过）\"></a>2.1 问题修复（如果上一步执行正常无报错 则跳过）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">container runtime is not running :CRI v1 runtime API is not implemented for endpoint \\&quot;unix:///var/run/containerd/containerd.sock\\&quot;: rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService</span><br></pre></td></tr></table></figure>\n\n<p>报错的原因是ubuntu22.04默认预装的是旧版本的containerd.io 需要下载二进制包手动替换：</p>\n<p>以下是简单步骤（可以照做）具体详细的文档参见<a href=\"https://github.com/containerd/containerd/blob/main/docs/getting-started.md\">https://github.com/containerd/containerd/blob/main/docs/getting-started.md</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下载containerd二进制包</span></span><br><span class=\"line\">wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将其解压缩到/usr/local下:</span></span><br><span class=\"line\">tar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">接下来从runc的github上单独下载安装runc，该二进制文件是静态构建的，并且应该适用于任何Linux发行版。</span></span><br><span class=\"line\">wget https://github.com/opencontainers/runc/releases/download/v1.1.7/runc.amd64</span><br><span class=\"line\">install -m 755 runc.amd64 /usr/local/sbin/runc</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">生成containerd的配置文件</span></span><br><span class=\"line\">mkdir -p /etc/containerd</span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n\n<p>根据官方文档指导 需要将<code>systemd</code> 设置为 cgroup 驱动对于使用systemd作为init system的Linux的发行版，使用systemd作为容器的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定 详见<a href=\"https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/\">https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/</a></p>\n<p>修改刚刚生成的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span></span><br><span class=\"line\">    <span class=\"attr\">SystemdCgroup</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>国内环境需要替换k8s官方镜像仓库为阿里云仓库</p>\n<p>还是刚刚的配置文件：</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\"># sandbox_image = &quot;registry.k8s.io/pause:3.8&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">sandbox_image</span> = <span class=\"string\">&quot;registry.aliyuncs.com/google_containers/pause:3.9&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>为了通过systemd启动containerd，请还需要从<code>https://raw.githubusercontent.com/containerd/containerd/main/containerd.service</code>下载<code>containerd.service</code>单元文件，并将其放置在<code> /etc/systemd/system/containerd.service</code>中。 配置containerd开机启动，并启动containerd，执行以下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/systemd/system</span><br><span class=\"line\">wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl enable containerd --now </span><br></pre></td></tr></table></figure>\n\n<p>下载安装crictl工具（选装，ubuntu22.04自带）:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.27.0/crictl-v1.27.0-linux-amd64.tar.gz</span><br><span class=\"line\">tar -zxvf crictl-v1.27.0-linux-amd64.tar.gz</span><br><span class=\"line\">install -m 755 crictl /usr/local/bin/crictl</span><br></pre></td></tr></table></figure>\n\n<p>使用crictl测试一下，确保可以打印出版本信息并且没有错误信息输出:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version</span><br><span class=\"line\"></span><br><span class=\"line\">Version:  0.1.0</span><br><span class=\"line\">RuntimeName:  containerd</span><br><span class=\"line\">RuntimeVersion:  v1.7.2</span><br><span class=\"line\">RuntimeApiVersion:  v1</span><br></pre></td></tr></table></figure>\n\n<p>notice：这里是第二个坑，执行命令返回 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version</span><br><span class=\"line\">FATA[0000] validate service connection: CRI v1 runtime API is not implemented for endpoint &quot;unix:///run/containerd/containerd.sock&quot;: rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService</span><br></pre></td></tr></table></figure>\n\n<p>！！（上一步没问题的跳过）原因是系统预装的containerd还在运行，需要删除掉后重启 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt remove containerd.io</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl enable containerd --now</span><br><span class=\"line\">systemctl status containerd</span><br></pre></td></tr></table></figure>\n\n<p>此时再次运行检查命令，返回正常</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crictl --runtime-endpoint=unix:///run/containerd/containerd.sock  version</span><br></pre></td></tr></table></figure>\n\n<p>启动kubelet</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable kubelet.service</span><br></pre></td></tr></table></figure>\n\n<p>再次运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">   --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-完成安装\"><a href=\"#2-2-完成安装\" class=\"headerlink\" title=\"2.2 完成安装\"></a>2.2 完成安装</h4><p>全部执行完成后根据提示执行下述命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\">\t</span><br><span class=\"line\">  mkdir -p $HOME/.kube</span><br><span class=\"line\">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, if you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">单节点集群跳过这步</span></span><br><span class=\"line\">kubeadm join 172.16.3.169:6443 --token z4o3n1.l64vso6rqo8pobmp \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:124049c1f0335b2ed1314262710e60ac4d344403bd6375d2c66ea7e3013da99c</span><br></pre></td></tr></table></figure>\n\n<p>执行 kubectl get pods -A</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAMESPACE     NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system   coredns-7bdc4cb885-w6vrn              0/1     Pending   0          5s</span><br><span class=\"line\">kube-system   coredns-7bdc4cb885-wx2nr              0/1     Pending   0          5s</span><br><span class=\"line\">kube-system   etcd-***-****-**                      1/1     Running   0          5s</span><br><span class=\"line\">kube-system   kube-apiserver-***-****-**            1/1     Running   0          5s</span><br><span class=\"line\">kube-system   kube-controller-manager-***-****-**   1/1     Running   0          5s</span><br><span class=\"line\">kube-system   kube-proxy-lbcbk                      1/1     Running   0          5s</span><br><span class=\"line\">kube-system   kube-scheduler-***-****-**            1/1     Running   0          5s</span><br></pre></td></tr></table></figure>\n\n<p>大功告成</p>\n<h3 id=\"3-安装包管理器helm-3\"><a href=\"#3-安装包管理器helm-3\" class=\"headerlink\" title=\"3.安装包管理器helm 3\"></a>3.安装包管理器helm 3</h3><p>Helm是Kubernetes的包管理器，后续流程也将使用Helm安装Kubernetes的常用组件。 这里先在master节点node1上安装helm。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz</span><br><span class=\"line\">tar -zxvf helm-v3.12.0-linux-amd64.tar.gz</span><br><span class=\"line\">mv linux-amd64/helm  /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<p>执行 helm list 确认没有错误输出</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cljmpiaa80001iqc9bvgv53yi","tag_id":"cljmpiaaa0004iqc90mq58nrj","_id":"cljmpiaac000aiqc9432xc5b5"},{"post_id":"cljmpiaa80001iqc9bvgv53yi","tag_id":"cljmpiaac0007iqc957o72hyb","_id":"cljmpiaac000biqc90uoace27"},{"post_id":"cljmpiaa80001iqc9bvgv53yi","tag_id":"cljmpiaac0008iqc96mtr03i7","_id":"cljmpiaac000diqc94eo01uv8"},{"post_id":"cljmpiaaa0003iqc96cho5h80","tag_id":"cljmpiaac0009iqc98m9tfn87","_id":"cljmpiaad000giqc96eoeanmp"},{"post_id":"cljmpiaaa0003iqc96cho5h80","tag_id":"cljmpiaac000ciqc985u9b3hj","_id":"cljmpiaad000hiqc96hwd54tx"},{"post_id":"cljmpiaaa0003iqc96cho5h80","tag_id":"cljmpiaac0007iqc957o72hyb","_id":"cljmpiaad000jiqc9b1qw56cm"},{"post_id":"cljmpiaab0006iqc931a3guza","tag_id":"cljmpiaad000fiqc98152adec","_id":"cljmpiaad000kiqc9f8upd6cv"},{"post_id":"cljmpiaab0006iqc931a3guza","tag_id":"cljmpiaad000iiqc947x5cdsz","_id":"cljmpiaad000liqc94pwug3av"}],"Tag":[{"name":"GMP","_id":"cljmpiaaa0004iqc90mq58nrj"},{"name":"golang","_id":"cljmpiaac0007iqc957o72hyb"},{"name":"源码","_id":"cljmpiaac0008iqc96mtr03i7"},{"name":"分布式链路追踪","_id":"cljmpiaac0009iqc98m9tfn87"},{"name":"skywalking","_id":"cljmpiaac000ciqc985u9b3hj"},{"name":"k8s","_id":"cljmpiaad000fiqc98152adec"},{"name":"linux","_id":"cljmpiaad000iiqc947x5cdsz"}]}}